#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "stm32f10x.h"

#include "DEBUG_UART/debug_uart.h"

char debug_uart_framebuf[100];

//just simple delay for demonstration
void LoopDelay(volatile uint32_t n) {
	while(n > 0) n--;
}

void debug_uart_str_event(char * str){
	debug_uart_puts(str);
	debug_uart_puts("\r\n");
}

#define DEBUG_ENDL			"\r\n"

#define DEBUG_MODULE_NAME0	"COR"		//core of application
#define DEBUG_MODULE_NAME1	"PWR"		//power management
#define DEBUG_MODULE_NAME2	"INT"		//interrupts
#define DEBUG_MODULE_NAME3	"LOR"		//lora communication
#define DEBUG_MODULE_NAME4	"SIG"		//signalling info

typedef enum T_Debug_module{debug_module_CORE = 0, debug_module_POWER_MANEGEMENT, debug_module_INTTERRUPTS, debug_module_LORA, debug_module_SIGNALLING}T_Debug_module;

typedef enum T_Debug_type{debug_type_INFO, debug_type_IMPORTANT, debug_type_WARNING, debug_type_ERROR}T_Debug_type;

char Debug_modules[5][4] = {
		{DEBUG_MODULE_NAME0},
		{DEBUG_MODULE_NAME1},
		{DEBUG_MODULE_NAME2},
		{DEBUG_MODULE_NAME3},
		{DEBUG_MODULE_NAME4}
};

char Debug_type0[] = "INFO";
char Debug_type1[] = "IMPORTANT";
char Debug_type2[] = "WARNING";
char Debug_type3[] = "ERROR";

char * Debug_types[4]={
		Debug_type0, Debug_type1, Debug_type2, Debug_type3
};

void Debug_log( T_Debug_module module, T_Debug_type type, char * msg, uint8_t endl){
	if(type == debug_type_IMPORTANT)debug_uart_puts("\033[1;32m");
	if(type == debug_type_ERROR)debug_uart_puts("\033[1;31m");
	if(type == debug_type_WARNING)debug_uart_puts("\033[1;93m");
	debug_uart_putc('[');
	debug_uart_puts(Debug_modules[module]);
	debug_uart_puts("] [");
	debug_uart_puts(Debug_types[type]);
	debug_uart_puts("] >");
	debug_uart_puts(msg);
	debug_uart_puts("\033[0m");
	if(endl) debug_uart_puts(DEBUG_ENDL);
}

uint8_t error_flag;
uint8_t event_flag;

uint8_t* i2c_data;
uint8_t i2c_data_len;
uint8_t i2c_slave_address;
uint8_t i2c_transmit;
uint8_t i2c_data_pos;

void I2C_transmit( uint8_t slave_address, uint8_t reg_address, uint8_t * data, uint8_t data_len){
	i2c_data = data;
	i2c_data_len = data_len;
	i2c_slave_address = slave_address;
	i2c_transmit  =1;
	I2C1->CR1 |= I2C_CR1_START;
}

int main(void){

	//processor starts up with pll configured for 72Mhz. (we will change it in future to make it fail-save) Let's change that for now to 36Mhz

	RCC->CR |= (RCC_CR_HSION);					//turn on HSI oscillator (8Mhz)
	while(!(RCC->CR & RCC_CR_HSIRDY));			//wait until oscillator starts

	RCC->CFGR &= ~(RCC_CFGR_SW);				//set SYSCLK to HSI (for the PLL configuration)
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);	//wait until it switches

	RCC->CR &= ~(RCC_CR_PLLON);					//turn off PLL (to be able to change parameters)

	RCC->CFGR &= ~(RCC_CFGR_PLLSRC);			//select PLL input as HSI/2
	RCC->CFGR |= (RCC_CFGR_PLLMULL16);			//set PLL multiplier to x9

	RCC->CR |= RCC_CR_PLLON;					//turn PLL back on
	while(!(RCC->CR & RCC_CR_PLLRDY));			//wait until it locks

	RCC->CFGR = (RCC->CFGR | RCC_CFGR_SW_1) | (RCC->CFGR & ~(RCC_CFGR_SW_0)); 	//set SYSCLK to PLL
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	//wait until it switches

	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;			//divide by 2 for abp1 pheriphals (max 36mhz)

	RCC->CFGR |= (RCC_CFGR_MCO_SYSCLK);			//set MCO to output sysclk

	RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN);		//enable Clock for GPIOC periph
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN);		//enable Clock for GPIOA periph
	RCC->APB2ENR |= (RCC_APB2ENR_IOPBEN);		//enable Clock for GPIOB periph

	RCC->APB1ENR |= (RCC_APB1ENR_I2C1EN);		//enable Clock for i2c1 periph

	GPIOA->CRH |= GPIO_CRH_MODE8;				//set PA8 as output with drive strenght to 50Mhz
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF8_1) & ~(GPIO_CRH_CNF8_0));	//set PA8 to push-pull alternate function

	//rx and tx debug
	GPIOA->CRH |= GPIO_CRH_MODE9;				//set PA9 as output with drive strenght to 50Mhz
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF9_1) & ~(GPIO_CRH_CNF9_0));	//set PA9 to push-pull alternate function
	GPIOA->CRH &= ~(GPIO_CRH_MODE10);				//set PA10 as output with drive strenght to 50Mhz
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF10_1) & ~(GPIO_CRH_CNF10_0));	//set PA10 to push-pull alternate function

	//led
	GPIOC->CRH |= GPIO_CRH_MODE8_0;				//set PC8 as output with drive strenght to 10Mhz
	GPIOC->CRH &= ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF8_1);	//set PC8 to push-pull normal operation

	//i2c bmp280
	GPIOB->CRL |= GPIO_CRL_MODE6;				//set PB6 as output with drive strenght to 50Mhz
	GPIOB->CRL |= GPIO_CRL_CNF6;				//set PB6 to open-drain alternate function
	GPIOB->CRL |= GPIO_CRL_MODE7;				//set PB7 as output with drive strenght to 50Mhz
	GPIOB->CRL |= GPIO_CRL_CNF7;				//set PB7 to open-drain alternate function

	I2C1->CR2 |= 0x20;							//freq of cpu
	I2C1->CCR |= 0x80;

	I2C1->CR2 |= I2C_CR2_ITEVTEN;				//enable interrupts status
	I2C1->CR2 |= I2C_CR2_ITERREN;				//enable interrupts error
//	I2C1->CR2 |= I2C_CR2_ITBUFEN;				//enable interrupts buffer

	I2C1->CR1 |= (I2C_CR1_PE);					//Peripheral enabled

	debug_uart_init();
	register_debug_uart_event_callback(debug_uart_str_event);
	NVIC_EnableIRQ(USART1_IRQn);
	NVIC_EnableIRQ(I2C1_ER_IRQn);
	NVIC_EnableIRQ(I2C1_EV_IRQn);

	while (1){

		I2C_transmit(0x76, 0xFB, 0, 1);

//		I2C1->CR1 |= I2C_CR1_START;
//		while(!(I2C1->SR1 & I2C_SR1_SB));
//
//		I2C1->DR = 0x76<<1;
//		while(!(I2C1->SR1 & I2C_SR1_ADDR));
//		uint32_t asd = I2C1->SR2;
//
//		I2C1->DR = 0xFB;
//
//		//I2C1->CR1 |= I2C_CR1_STOP;
//
//		if(I2C1->SR1 & I2C_SR1_AF){
//			GPIOC->BSRR |= GPIO_BSRR_BR8;
//		}else{
//			GPIOC->BSRR |= GPIO_BSRR_BS8;
//		}
//
//		//LoopDelay(1000);
//
//		I2C1->CR1 |= I2C_CR1_START;
//		while(!(I2C1->SR1 & I2C_SR1_SB));
//
//		I2C1->DR = (0x76<<1)+1;
//		while(!(I2C1->SR1 & I2C_SR1_ADDR));
//		asd = I2C1->SR2;
//
//		I2C1->CR1 &= ~I2C_CR1_ACK;
//
//		//I2C1->DR = 0xD0;
//
//		I2C1->CR1 |= I2C_CR1_STOP;
//
//		while(!(I2C1->SR1 & I2C_SR1_RXNE));
//
////		if(I2C1->DR != 0x58){
////			GPIOC->BSRR |= GPIO_BSRR_BR8;
////		}else{
////			GPIOC->BSRR |= GPIO_BSRR_BS8;
////		}
//		char buf[6];
//		itoa(I2C1->DR, buf, 10);
//		debug_uart_puts(buf);

		char message[] = "green text";
		Debug_log(debug_module_CORE,debug_type_IMPORTANT,message,1);
		Debug_log(debug_module_CORE,debug_type_ERROR,message,1);
		Debug_log(debug_module_CORE,debug_type_WARNING,message,1);
		LoopDelay(1000000);
		DEBUG_UART_EVENT(debug_uart_framebuf);

	}
}

void I2C1_ER_IRQHandler(void){

		debug_uart_puts("eer");
}

void I2C1_EV_IRQHandler(void){

	if(I2C1->SR1 & I2C_SR1_SB){
		if(i2c_transmit) I2C1->DR = i2c_slave_address<<1;
		else I2C1->DR = (i2c_slave_address<<1) + 1;
	}

	if(I2C1->SR1 & I2C_SR1_ADDR){
		uint32_t asd = I2C1->SR2;
		I2C1->DR = i2c_data[0];
	}

	if(I2C1->SR1 & I2C_SR1_BTF){
		i2c_data_pos++;
		I2C1->DR = i2c_data[i2c_data_pos];
		if(i2c_data_pos == i2c_data_len)I2C1->CR1 |= I2C_CR1_STOP;
		else if(i2c_data_pos > i2c_data_len){
			i2c_data_pos = 0;
			debug_uart_puts("sent\r\n");
		}
	}

//	//char message[] = "evv";
//	char buf[6];
//	itoa(I2C1->SR1, buf, 16);
//	debug_uart_puts(buf);
}
