#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "stm32f10x.h"

#include "DEBUG_UART/debug_uart.h"

char debug_uart_framebuf[100];

//just simple delay for demonstration
void LoopDelay(volatile uint32_t n) {
	while(n > 0) n--;
}

void debug_uart_str_event(char * str){
	debug_uart_puts(str);
	debug_uart_puts("\r\n");
}

#define DEBUG_ENDL			"\r\n"

#define DEBUG_MODULE_NAME0	"COR"		//core of application
#define DEBUG_MODULE_NAME1	"PWR"		//power management
#define DEBUG_MODULE_NAME2	"INT"		//interrupts
#define DEBUG_MODULE_NAME3	"LOR"		//lora communication
#define DEBUG_MODULE_NAME4	"SIG"		//signalling info

typedef enum T_Debug_module{debug_module_CORE = 0, debug_module_POWER_MANEGEMENT, debug_module_INTTERRUPTS, debug_module_LORA, debug_module_SIGNALLING}T_Debug_module;

typedef enum T_Debug_type{debug_type_INFO, debug_type_IMPORTANT, debug_type_WARNING, debug_type_ERROR}T_Debug_type;

char Debug_modules[5][4] = {
		{DEBUG_MODULE_NAME0},
		{DEBUG_MODULE_NAME1},
		{DEBUG_MODULE_NAME2},
		{DEBUG_MODULE_NAME3},
		{DEBUG_MODULE_NAME4}
};

char Debug_type0[] = "INFO";
char Debug_type1[] = "IMPORTANT";
char Debug_type2[] = "WARNING";
char Debug_type3[] = "ERROR";

char * Debug_types[4]={
		Debug_type0, Debug_type1, Debug_type2, Debug_type3
};

void Debug_log( T_Debug_module module, T_Debug_type type, char * msg, uint8_t endl){
	if(type == debug_type_IMPORTANT)debug_uart_puts("\033[1;32m");
	debug_uart_putc('[');
	debug_uart_puts(Debug_modules[module]);
	debug_uart_puts("] [");
	debug_uart_puts(Debug_types[type]);
	debug_uart_puts("] >");
	debug_uart_puts(msg);
	if(type == debug_type_IMPORTANT)debug_uart_puts("\033[0m");
	if(endl) debug_uart_puts(DEBUG_ENDL);
}

int main(void){

	//processor starts up with pll configured for 72Mhz. (we will change it in future to make it fail-save) Let's change that for now to 36Mhz

	RCC->CR |= (RCC_CR_HSION);					//turn on HSI oscillator (8Mhz)
	while(!(RCC->CR & RCC_CR_HSIRDY));			//wait until oscillator starts

	RCC->CFGR &= ~(RCC_CFGR_SW);				//set SYSCLK to HSI (for the PLL configuration)
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);	//wait until it switches

	RCC->CR &= ~(RCC_CR_PLLON);					//turn off PLL (to be able to change parameters)

	RCC->CFGR &= ~(RCC_CFGR_PLLSRC);			//select PLL input as HSI/2
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);			//set PLL multiplier to x9

	RCC->CR |= RCC_CR_PLLON;					//turn PLL back on
	while(!(RCC->CR & RCC_CR_PLLRDY));			//wait until it locks

	RCC->CFGR = (RCC->CFGR | RCC_CFGR_SW_1) | (RCC->CFGR & ~(RCC_CFGR_SW_0)); 	//set SYSCLK to PLL
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	//wait until it switches

	RCC->CFGR |= (RCC_CFGR_MCO_SYSCLK);			//set MCO to output sysclk

	RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN);		//enable Clock for GPIOC periph
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN);		//enable Clock for GPIOA periph

	GPIOA->CRH |= GPIO_CRH_MODE8;				//set PA8 as output with drive strenght to 50Mhz
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF8_1) & ~(GPIO_CRH_CNF8_0));	//set PA8 to push-pull alternate function

	GPIOA->CRH |= GPIO_CRH_MODE9;				//set PA9 as output with drive strenght to 50Mhz
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF9_1) & ~(GPIO_CRH_CNF9_0));	//set PA9 to push-pull alternate function
	GPIOA->CRH &= ~(GPIO_CRH_MODE10);				//set PA10 as output with drive strenght to 50Mhz
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF10_1) & ~(GPIO_CRH_CNF10_0));	//set PA10 to push-pull alternate function

	GPIOC->CRH |= GPIO_CRH_MODE8_0;				//set PC8 as output with drive strenght to 10Mhz
	GPIOC->CRH &= ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF8_1);	//set PC8 to push-pull normal operation

	debug_uart_init();
	register_debug_uart_event_callback(debug_uart_str_event);
	NVIC_EnableIRQ(USART1_IRQn);

	while (1){

		char message[] = "green text";
		Debug_log(debug_module_CORE,debug_type_IMPORTANT,message,1);
		LoopDelay(1000000);

		DEBUG_UART_EVENT(debug_uart_framebuf);

	}
}
