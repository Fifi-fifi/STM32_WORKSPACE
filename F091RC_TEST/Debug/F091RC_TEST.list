
F091RC_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000328  08000330  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000328  08000328  00010328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000330  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000001c  08000330  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000550  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001f0  00000000  00000000  000108a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000078  00000000  00000000  00010a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00010b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000003f8  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000260  00000000  00000000  00010f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000c4  00000000  00000000  00011234  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000112f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000310 	.word	0x08000310

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000310 	.word	0x08000310

08000104 <LoopDelay>:
#include "stm32f0xx.h"

void LoopDelay(volatile uint32_t n) {
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 800010c:	e002      	b.n	8000114 <LoopDelay+0x10>
 800010e:	687b      	ldr	r3, [r7, #4]
 8000110:	3b01      	subs	r3, #1
 8000112:	607b      	str	r3, [r7, #4]
 8000114:	687b      	ldr	r3, [r7, #4]
 8000116:	2b00      	cmp	r3, #0
 8000118:	d1f9      	bne.n	800010e <LoopDelay+0xa>
}
 800011a:	46c0      	nop			; (mov r8, r8)
 800011c:	46bd      	mov	sp, r7
 800011e:	b002      	add	sp, #8
 8000120:	bd80      	pop	{r7, pc}
	...

08000124 <main>:

int main(void){
 8000124:	b580      	push	{r7, lr}
 8000126:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSION; 					//enable high-speed internal oscillator
 8000128:	4b2d      	ldr	r3, [pc, #180]	; (80001e0 <main+0xbc>)
 800012a:	4a2d      	ldr	r2, [pc, #180]	; (80001e0 <main+0xbc>)
 800012c:	6812      	ldr	r2, [r2, #0]
 800012e:	2101      	movs	r1, #1
 8000130:	430a      	orrs	r2, r1
 8000132:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY)); 		//wait until oscillator starts
 8000134:	46c0      	nop			; (mov r8, r8)
 8000136:	4b2a      	ldr	r3, [pc, #168]	; (80001e0 <main+0xbc>)
 8000138:	681b      	ldr	r3, [r3, #0]
 800013a:	2202      	movs	r2, #2
 800013c:	4013      	ands	r3, r2
 800013e:	d0fa      	beq.n	8000136 <main+0x12>

	RCC->CFGR |= (RCC_CFGR_SW);					//set system clock source to hsi
 8000140:	4b27      	ldr	r3, [pc, #156]	; (80001e0 <main+0xbc>)
 8000142:	4a27      	ldr	r2, [pc, #156]	; (80001e0 <main+0xbc>)
 8000144:	6852      	ldr	r2, [r2, #4]
 8000146:	2103      	movs	r1, #3
 8000148:	430a      	orrs	r2, r1
 800014a:	605a      	str	r2, [r3, #4]
	RCC->CFGR &= ~(RCC_CFGR_HPRE);				//set ahb prescaler to not divide
 800014c:	4b24      	ldr	r3, [pc, #144]	; (80001e0 <main+0xbc>)
 800014e:	4a24      	ldr	r2, [pc, #144]	; (80001e0 <main+0xbc>)
 8000150:	6852      	ldr	r2, [r2, #4]
 8000152:	21f0      	movs	r1, #240	; 0xf0
 8000154:	438a      	bics	r2, r1
 8000156:	605a      	str	r2, [r3, #4]

	RCC->AHBENR |= (RCC_AHBENR_GPIOAEN);		//enable clock for PORTA peripheral
 8000158:	4b21      	ldr	r3, [pc, #132]	; (80001e0 <main+0xbc>)
 800015a:	4a21      	ldr	r2, [pc, #132]	; (80001e0 <main+0xbc>)
 800015c:	6952      	ldr	r2, [r2, #20]
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	0289      	lsls	r1, r1, #10
 8000162:	430a      	orrs	r2, r1
 8000164:	615a      	str	r2, [r3, #20]

	GPIOA->MODER |= (GPIO_MODER_MODER5_0); 		//set PB5 mode to general purpose out
 8000166:	2390      	movs	r3, #144	; 0x90
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	2290      	movs	r2, #144	; 0x90
 800016c:	05d2      	lsls	r2, r2, #23
 800016e:	6812      	ldr	r2, [r2, #0]
 8000170:	2180      	movs	r1, #128	; 0x80
 8000172:	00c9      	lsls	r1, r1, #3
 8000174:	430a      	orrs	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_5);		//set PB5 type to push-pull
 8000178:	2390      	movs	r3, #144	; 0x90
 800017a:	05db      	lsls	r3, r3, #23
 800017c:	2290      	movs	r2, #144	; 0x90
 800017e:	05d2      	lsls	r2, r2, #23
 8000180:	6852      	ldr	r2, [r2, #4]
 8000182:	2120      	movs	r1, #32
 8000184:	438a      	bics	r2, r1
 8000186:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR5_1);	//set PB5 speed to high
 8000188:	2390      	movs	r3, #144	; 0x90
 800018a:	05db      	lsls	r3, r3, #23
 800018c:	2290      	movs	r2, #144	; 0x90
 800018e:	05d2      	lsls	r2, r2, #23
 8000190:	6892      	ldr	r2, [r2, #8]
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	0109      	lsls	r1, r1, #4
 8000196:	430a      	orrs	r2, r1
 8000198:	609a      	str	r2, [r3, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR5_0);		//set PB5 pu/pd to no pull
 800019a:	2390      	movs	r3, #144	; 0x90
 800019c:	05db      	lsls	r3, r3, #23
 800019e:	2290      	movs	r2, #144	; 0x90
 80001a0:	05d2      	lsls	r2, r2, #23
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	490f      	ldr	r1, [pc, #60]	; (80001e4 <main+0xc0>)
 80001a6:	400a      	ands	r2, r1
 80001a8:	60da      	str	r2, [r3, #12]

	while (1){

		GPIOA->BSRR |= (GPIO_BSRR_BS_5);
 80001aa:	2390      	movs	r3, #144	; 0x90
 80001ac:	05db      	lsls	r3, r3, #23
 80001ae:	2290      	movs	r2, #144	; 0x90
 80001b0:	05d2      	lsls	r2, r2, #23
 80001b2:	6992      	ldr	r2, [r2, #24]
 80001b4:	2120      	movs	r1, #32
 80001b6:	430a      	orrs	r2, r1
 80001b8:	619a      	str	r2, [r3, #24]
		LoopDelay(20000);
 80001ba:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <main+0xc4>)
 80001bc:	0018      	movs	r0, r3
 80001be:	f7ff ffa1 	bl	8000104 <LoopDelay>
		GPIOA->BSRR |= (GPIO_BSRR_BR_5);
 80001c2:	2390      	movs	r3, #144	; 0x90
 80001c4:	05db      	lsls	r3, r3, #23
 80001c6:	2290      	movs	r2, #144	; 0x90
 80001c8:	05d2      	lsls	r2, r2, #23
 80001ca:	6992      	ldr	r2, [r2, #24]
 80001cc:	2180      	movs	r1, #128	; 0x80
 80001ce:	0389      	lsls	r1, r1, #14
 80001d0:	430a      	orrs	r2, r1
 80001d2:	619a      	str	r2, [r3, #24]
		LoopDelay(20000);
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <main+0xc4>)
 80001d6:	0018      	movs	r0, r3
 80001d8:	f7ff ff94 	bl	8000104 <LoopDelay>
		GPIOA->BSRR |= (GPIO_BSRR_BS_5);
 80001dc:	e7e5      	b.n	80001aa <main+0x86>
 80001de:	46c0      	nop			; (mov r8, r8)
 80001e0:	40021000 	.word	0x40021000
 80001e4:	fffffbff 	.word	0xfffffbff
 80001e8:	00004e20 	.word	0x00004e20

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80001f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80001f2:	e003      	b.n	80001fc <LoopCopyDataInit>

080001f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80001f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80001f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80001fa:	3104      	adds	r1, #4

080001fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <LoopForever+0xa>)
  ldr r3, =_edata
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <LoopForever+0xe>)
  adds r2, r0, r1
 8000200:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000202:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000204:	d3f6      	bcc.n	80001f4 <CopyDataInit>
  ldr r2, =_sbss
 8000206:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <LoopForever+0x12>)
  b LoopFillZerobss
 8000208:	e002      	b.n	8000210 <LoopFillZerobss>

0800020a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  str  r3, [r2]
 800020c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800020e:	3204      	adds	r2, #4

08000210 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <LoopForever+0x16>)
  cmp r2, r3
 8000212:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000214:	d3f9      	bcc.n	800020a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000216:	f000 f813 	bl	8000240 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f855 	bl	80002c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ff81 	bl	8000124 <main>

08000222 <LoopForever>:

LoopForever:
    b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 8000228:	08000330 	.word	0x08000330
  ldr r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000230:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_COMP_IRQHandler>
	...

08000240 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <SystemInit+0x70>)
 8000246:	4a1a      	ldr	r2, [pc, #104]	; (80002b0 <SystemInit+0x70>)
 8000248:	6812      	ldr	r2, [r2, #0]
 800024a:	2101      	movs	r1, #1
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <SystemInit+0x70>)
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <SystemInit+0x70>)
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	4917      	ldr	r1, [pc, #92]	; (80002b4 <SystemInit+0x74>)
 8000258:	400a      	ands	r2, r1
 800025a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <SystemInit+0x70>)
 800025e:	4a14      	ldr	r2, [pc, #80]	; (80002b0 <SystemInit+0x70>)
 8000260:	6812      	ldr	r2, [r2, #0]
 8000262:	4915      	ldr	r1, [pc, #84]	; (80002b8 <SystemInit+0x78>)
 8000264:	400a      	ands	r2, r1
 8000266:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <SystemInit+0x70>)
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <SystemInit+0x70>)
 800026c:	6812      	ldr	r2, [r2, #0]
 800026e:	4913      	ldr	r1, [pc, #76]	; (80002bc <SystemInit+0x7c>)
 8000270:	400a      	ands	r2, r1
 8000272:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <SystemInit+0x70>)
 8000276:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <SystemInit+0x70>)
 8000278:	6852      	ldr	r2, [r2, #4]
 800027a:	4911      	ldr	r1, [pc, #68]	; (80002c0 <SystemInit+0x80>)
 800027c:	400a      	ands	r2, r1
 800027e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <SystemInit+0x70>)
 8000282:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <SystemInit+0x70>)
 8000284:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000286:	210f      	movs	r1, #15
 8000288:	438a      	bics	r2, r1
 800028a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <SystemInit+0x70>)
 800028e:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <SystemInit+0x70>)
 8000290:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000292:	490c      	ldr	r1, [pc, #48]	; (80002c4 <SystemInit+0x84>)
 8000294:	400a      	ands	r2, r1
 8000296:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <SystemInit+0x70>)
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <SystemInit+0x70>)
 800029c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800029e:	2101      	movs	r1, #1
 80002a0:	438a      	bics	r2, r1
 80002a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80002a4:	4b02      	ldr	r3, [pc, #8]	; (80002b0 <SystemInit+0x70>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]

}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40021000 	.word	0x40021000
 80002b4:	08ffb80c 	.word	0x08ffb80c
 80002b8:	fef6ffff 	.word	0xfef6ffff
 80002bc:	fffbffff 	.word	0xfffbffff
 80002c0:	ffc0ffff 	.word	0xffc0ffff
 80002c4:	fff0feac 	.word	0xfff0feac

080002c8 <__libc_init_array>:
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	2600      	movs	r6, #0
 80002cc:	4d0c      	ldr	r5, [pc, #48]	; (8000300 <__libc_init_array+0x38>)
 80002ce:	4c0d      	ldr	r4, [pc, #52]	; (8000304 <__libc_init_array+0x3c>)
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	42a6      	cmp	r6, r4
 80002d6:	d109      	bne.n	80002ec <__libc_init_array+0x24>
 80002d8:	2600      	movs	r6, #0
 80002da:	f000 f819 	bl	8000310 <_init>
 80002de:	4d0a      	ldr	r5, [pc, #40]	; (8000308 <__libc_init_array+0x40>)
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <__libc_init_array+0x44>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d105      	bne.n	80002f6 <__libc_init_array+0x2e>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	00b3      	lsls	r3, r6, #2
 80002ee:	58eb      	ldr	r3, [r5, r3]
 80002f0:	4798      	blx	r3
 80002f2:	3601      	adds	r6, #1
 80002f4:	e7ee      	b.n	80002d4 <__libc_init_array+0xc>
 80002f6:	00b3      	lsls	r3, r6, #2
 80002f8:	58eb      	ldr	r3, [r5, r3]
 80002fa:	4798      	blx	r3
 80002fc:	3601      	adds	r6, #1
 80002fe:	e7f2      	b.n	80002e6 <__libc_init_array+0x1e>
 8000300:	08000328 	.word	0x08000328
 8000304:	08000328 	.word	0x08000328
 8000308:	08000328 	.word	0x08000328
 800030c:	0800032c 	.word	0x0800032c

08000310 <_init>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr

0800031c <_fini>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr
