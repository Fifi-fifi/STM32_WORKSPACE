
STM32F103RGT6_NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c0c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08000e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000134  20000038  08000e50  00020038  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000016c  08000e50  0002016c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000257b  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000757  00000000  00000000  000225dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001b0  00000000  00000000  00022d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00022ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000d74  00000000  00000000  00023050  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ec5  00000000  00000000  00023dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00024c89  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000558  00000000  00000000  00024d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00025260  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000038 	.word	0x20000038
 8000200:	00000000 	.word	0x00000000
 8000204:	08000dd8 	.word	0x08000dd8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000003c 	.word	0x2000003c
 8000220:	08000dd8 	.word	0x08000dd8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <register_debug_uart_event_callback>:

#include "debug_uart.h"

static void (*debug_uart_event_callback)(char * buf);

void register_debug_uart_event_callback(void (*callback)(char * buf)) {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	debug_uart_event_callback = callback;
 800023c:	4a03      	ldr	r2, [pc, #12]	; (800024c <register_debug_uart_event_callback+0x18>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6013      	str	r3, [r2, #0]
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	20000054 	.word	0x20000054

08000250 <debug_uart_init>:
uint32_t debug_uart_head_rx;
volatile uint32_t debug_uart_tail_rx;

uint32_t debug_uart_ascii_line;

void debug_uart_init(){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_USART1EN);		//enable Clock for USART1 periph
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <debug_uart_init+0x60>)
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <debug_uart_init+0x60>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800025e:	6193      	str	r3, [r2, #24]
	USART1->BRR |= (39 << 4) | 1;				//set USART1 baud rate to 57600
 8000260:	4a14      	ldr	r2, [pc, #80]	; (80002b4 <debug_uart_init+0x64>)
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <debug_uart_init+0x64>)
 8000264:	891b      	ldrh	r3, [r3, #8]
 8000266:	b29b      	uxth	r3, r3
 8000268:	f443 731c 	orr.w	r3, r3, #624	; 0x270
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	b29b      	uxth	r3, r3
 8000272:	8113      	strh	r3, [r2, #8]
	USART1->CR1 &= ~(USART_CR1_M);				//set USART1 working mode to 8/1
 8000274:	4a0f      	ldr	r2, [pc, #60]	; (80002b4 <debug_uart_init+0x64>)
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <debug_uart_init+0x64>)
 8000278:	899b      	ldrh	r3, [r3, #12]
 800027a:	b29b      	uxth	r3, r3
 800027c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000280:	b29b      	uxth	r3, r3
 8000282:	8193      	strh	r3, [r2, #12]
	USART1->CR1 |= (USART_CR1_RXNEIE);
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <debug_uart_init+0x64>)
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <debug_uart_init+0x64>)
 8000288:	899b      	ldrh	r3, [r3, #12]
 800028a:	b29b      	uxth	r3, r3
 800028c:	f043 0320 	orr.w	r3, r3, #32
 8000290:	b29b      	uxth	r3, r3
 8000292:	8193      	strh	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;				//enable USART1
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <debug_uart_init+0x64>)
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <debug_uart_init+0x64>)
 8000298:	899b      	ldrh	r3, [r3, #12]
 800029a:	b29b      	uxth	r3, r3
 800029c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a0:	f043 030c 	orr.w	r3, r3, #12
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	8193      	strh	r3, [r2, #12]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40013800 	.word	0x40013800

080002b8 <debug_uart_putc>:

void debug_uart_putc(char c){
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	uint32_t temporary_head;
	temporary_head = (debug_uart_head_tx+1) & DEBUG_UART_BUF_TX_MASK;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <debug_uart_putc+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	3301      	adds	r3, #1
 80002c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002cc:	60fb      	str	r3, [r7, #12]
	debug_uart_buf_tx[temporary_head] = c;
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <debug_uart_putc+0x44>)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	79fa      	ldrb	r2, [r7, #7]
 80002d6:	701a      	strb	r2, [r3, #0]
	debug_uart_head_tx = temporary_head;
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <debug_uart_putc+0x40>)
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	6013      	str	r3, [r2, #0]
	USART1->CR1 |= (USART_CR1_TXEIE);
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <debug_uart_putc+0x48>)
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <debug_uart_putc+0x48>)
 80002e2:	899b      	ldrh	r3, [r3, #12]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	8193      	strh	r3, [r2, #12]
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	200000e0 	.word	0x200000e0
 80002fc:	200000ec 	.word	0x200000ec
 8000300:	40013800 	.word	0x40013800

08000304 <debug_uart_puts>:
			debug_uart_head_rx = debug_uart_tail_tx;
		}
	}
}

void debug_uart_puts(char * str){
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i<strlen(str); i++){
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e009      	b.n	8000326 <debug_uart_puts+0x22>
		debug_uart_putc(str[i]);
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffcc 	bl	80002b8 <debug_uart_putc>
	for(uint32_t i = 0; i<strlen(str); i++){
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f7ff ff7c 	bl	8000224 <strlen>
 800032c:	4602      	mov	r2, r0
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	429a      	cmp	r2, r3
 8000332:	d8ee      	bhi.n	8000312 <debug_uart_puts+0xe>
	}
}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0

	//TRANSMIT COMPLETE
	if(USART1->SR & USART_SR_TXE){
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <USART1_IRQHandler+0xe4>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	b29b      	uxth	r3, r3
 8000348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800034c:	2b00      	cmp	r3, #0
 800034e:	d024      	beq.n	800039a <USART1_IRQHandler+0x5e>
		if(debug_uart_tail_tx != debug_uart_head_tx){
 8000350:	4b34      	ldr	r3, [pc, #208]	; (8000424 <USART1_IRQHandler+0xe8>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <USART1_IRQHandler+0xec>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	429a      	cmp	r2, r3
 800035a:	d00e      	beq.n	800037a <USART1_IRQHandler+0x3e>
			debug_uart_tail_tx = (debug_uart_tail_tx+1) & DEBUG_UART_BUF_RX_MASK;
 800035c:	4b31      	ldr	r3, [pc, #196]	; (8000424 <USART1_IRQHandler+0xe8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000366:	4a2f      	ldr	r2, [pc, #188]	; (8000424 <USART1_IRQHandler+0xe8>)
 8000368:	6013      	str	r3, [r2, #0]
			USART1->DR = debug_uart_buf_tx[debug_uart_tail_tx];
 800036a:	4a2d      	ldr	r2, [pc, #180]	; (8000420 <USART1_IRQHandler+0xe4>)
 800036c:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <USART1_IRQHandler+0xe8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	492e      	ldr	r1, [pc, #184]	; (800042c <USART1_IRQHandler+0xf0>)
 8000372:	5ccb      	ldrb	r3, [r1, r3]
 8000374:	b29b      	uxth	r3, r3
 8000376:	8093      	strh	r3, [r2, #4]
 8000378:	e007      	b.n	800038a <USART1_IRQHandler+0x4e>
		}else{ USART1->CR1 &= ~(USART_CR1_TXEIE); }
 800037a:	4a29      	ldr	r2, [pc, #164]	; (8000420 <USART1_IRQHandler+0xe4>)
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <USART1_IRQHandler+0xe4>)
 800037e:	899b      	ldrh	r3, [r3, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000386:	b29b      	uxth	r3, r3
 8000388:	8193      	strh	r3, [r2, #12]
		USART1->SR &= ~USART_SR_TXE;				//reset interrupt flag
 800038a:	4a25      	ldr	r2, [pc, #148]	; (8000420 <USART1_IRQHandler+0xe4>)
 800038c:	4b24      	ldr	r3, [pc, #144]	; (8000420 <USART1_IRQHandler+0xe4>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b29b      	uxth	r3, r3
 8000392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000396:	b29b      	uxth	r3, r3
 8000398:	8013      	strh	r3, [r2, #0]
	}

	//DATA RECEIVED
	if(USART1->SR & USART_SR_RXNE){
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <USART1_IRQHandler+0xe4>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d035      	beq.n	8000414 <USART1_IRQHandler+0xd8>
		char data = USART1->DR;
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <USART1_IRQHandler+0xe4>)
 80003aa:	889b      	ldrh	r3, [r3, #4]
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	71fb      	strb	r3, [r7, #7]
		uint32_t temporary_head = (debug_uart_head_rx+1) & DEBUG_UART_BUF_RX_MASK;
 80003b0:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <USART1_IRQHandler+0xf4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ba:	603b      	str	r3, [r7, #0]
		if(temporary_head == debug_uart_tail_rx){
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <USART1_IRQHandler+0xf8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d104      	bne.n	80003d0 <USART1_IRQHandler+0x94>
			//overflow
			debug_uart_head_rx = debug_uart_tail_rx;
 80003c6:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <USART1_IRQHandler+0xf8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a19      	ldr	r2, [pc, #100]	; (8000430 <USART1_IRQHandler+0xf4>)
 80003cc:	6013      	str	r3, [r2, #0]
 80003ce:	e019      	b.n	8000404 <USART1_IRQHandler+0xc8>
		}else{
			switch(data){
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2b0a      	cmp	r3, #10
 80003d4:	d013      	beq.n	80003fe <USART1_IRQHandler+0xc2>
 80003d6:	2b0d      	cmp	r3, #13
 80003d8:	d002      	beq.n	80003e0 <USART1_IRQHandler+0xa4>
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d011      	beq.n	8000402 <USART1_IRQHandler+0xc6>
 80003de:	e005      	b.n	80003ec <USART1_IRQHandler+0xb0>
			case 0: break;
			case 10: break;// break;
			case 13: debug_uart_ascii_line++;break;
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <USART1_IRQHandler+0xfc>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <USART1_IRQHandler+0xfc>)
 80003e8:	6013      	str	r3, [r2, #0]
 80003ea:	e00b      	b.n	8000404 <USART1_IRQHandler+0xc8>
			default: debug_uart_head_rx = temporary_head; debug_uart_buf_rx[temporary_head] = data; break;
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <USART1_IRQHandler+0xf4>)
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <USART1_IRQHandler+0x100>)
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	4413      	add	r3, r2
 80003f8:	79fa      	ldrb	r2, [r7, #7]
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	e002      	b.n	8000404 <USART1_IRQHandler+0xc8>
			case 10: break;// break;
 80003fe:	bf00      	nop
 8000400:	e000      	b.n	8000404 <USART1_IRQHandler+0xc8>
			case 0: break;
 8000402:	bf00      	nop
			}
		}

		USART1->SR &= ~USART_SR_RXNE;				//reset interrupt flag
 8000404:	4a06      	ldr	r2, [pc, #24]	; (8000420 <USART1_IRQHandler+0xe4>)
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <USART1_IRQHandler+0xe4>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	f023 0320 	bic.w	r3, r3, #32
 8000410:	b29b      	uxth	r3, r3
 8000412:	8013      	strh	r3, [r2, #0]
	}

}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40013800 	.word	0x40013800
 8000424:	200000e8 	.word	0x200000e8
 8000428:	200000e0 	.word	0x200000e0
 800042c:	200000ec 	.word	0x200000ec
 8000430:	200000e4 	.word	0x200000e4
 8000434:	200000d8 	.word	0x200000d8
 8000438:	200000dc 	.word	0x200000dc
 800043c:	20000058 	.word	0x20000058

08000440 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800044a:	4908      	ldr	r1, [pc, #32]	; (800046c <NVIC_EnableIRQ+0x2c>)
 800044c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000450:	095b      	lsrs	r3, r3, #5
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	f002 021f 	and.w	r2, r2, #31
 8000458:	2001      	movs	r0, #1
 800045a:	fa00 f202 	lsl.w	r2, r0, r2
 800045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	e000e100 	.word	0xe000e100

08000470 <LoopDelay>:
#define CE_LOW		GPIOA->BSRR = GPIO_BSRR_BR3

char debug_uart_framebuf[100];

//just simple delay for demonstration
void LoopDelay(volatile uint64_t n) {
 8000470:	b490      	push	{r4, r7}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	e9c7 0100 	strd	r0, r1, [r7]
	while(n > 0) n--;
 800047a:	e007      	b.n	800048c <LoopDelay+0x1c>
 800047c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000480:	f113 33ff 	adds.w	r3, r3, #4294967295
 8000484:	f144 34ff 	adc.w	r4, r4, #4294967295
 8000488:	e887 0018 	stmia.w	r7, {r3, r4}
 800048c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000490:	4323      	orrs	r3, r4
 8000492:	d1f3      	bne.n	800047c <LoopDelay+0xc>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bc90      	pop	{r4, r7}
 800049c:	4770      	bx	lr
	...

080004a0 <SPI_transmit_recieve>:

uint8_t SPI_transmit_recieve( uint8_t byte ){
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	SPI1->DR = byte;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <SPI_transmit_recieve+0x34>)
 80004ac:	79fa      	ldrb	r2, [r7, #7]
 80004ae:	b292      	uxth	r2, r2
 80004b0:	819a      	strh	r2, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));
 80004b2:	bf00      	nop
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <SPI_transmit_recieve+0x34>)
 80004b6:	891b      	ldrh	r3, [r3, #8]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f8      	beq.n	80004b4 <SPI_transmit_recieve+0x14>
	return SPI1->DR;
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <SPI_transmit_recieve+0x34>)
 80004c4:	899b      	ldrh	r3, [r3, #12]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	b2db      	uxtb	r3, r3
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40013000 	.word	0x40013000

080004d8 <SPI_write_buf>:

void SPI_write_buf( uint8_t* data, uint8_t len ){
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i<len; i++){
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
 80004e8:	e015      	b.n	8000516 <SPI_write_buf+0x3e>
		SPI1->DR = data[i];
 80004ea:	490f      	ldr	r1, [pc, #60]	; (8000528 <SPI_write_buf+0x50>)
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	818b      	strh	r3, [r1, #12]
		while(!(SPI1->SR & SPI_SR_RXNE));
 80004f8:	bf00      	nop
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <SPI_write_buf+0x50>)
 80004fc:	891b      	ldrh	r3, [r3, #8]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f8      	beq.n	80004fa <SPI_write_buf+0x22>
		uint8_t a = SPI1->DR;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <SPI_write_buf+0x50>)
 800050a:	899b      	ldrh	r3, [r3, #12]
 800050c:	b29b      	uxth	r3, r3
 800050e:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i<len; i++){
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
 8000516:	7bfa      	ldrb	r2, [r7, #15]
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	429a      	cmp	r2, r3
 800051c:	d3e5      	bcc.n	80004ea <SPI_write_buf+0x12>
	}
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40013000 	.word	0x40013000

0800052c <NRF_write_command>:
		while(!(SPI1->SR & SPI_SR_RXNE));
		data[i] = SPI1->DR;
	}
}

void NRF_write_command( uint8_t command , uint8_t* data, uint8_t len){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
	CSN_LOW;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <NRF_write_command+0x38>)
 800053e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000542:	611a      	str	r2, [r3, #16]
	SPI_transmit_recieve(command);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ffaa 	bl	80004a0 <SPI_transmit_recieve>
	SPI_write_buf(data, len);
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	4619      	mov	r1, r3
 8000550:	6838      	ldr	r0, [r7, #0]
 8000552:	f7ff ffc1 	bl	80004d8 <SPI_write_buf>
	CSN_HIGH;
 8000556:	4b03      	ldr	r3, [pc, #12]	; (8000564 <NRF_write_command+0x38>)
 8000558:	2210      	movs	r2, #16
 800055a:	611a      	str	r2, [r3, #16]
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40010800 	.word	0x40010800

08000568 <NRF_write_reg8>:
	SPI_transmit_recieve(command);
	SPI_read_buf(data, len);
	CSN_HIGH;
}

void NRF_write_reg8( uint8_t reg, uint8_t byte){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	CSN_LOW;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <NRF_write_reg8+0x3c>)
 800057a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800057e:	611a      	str	r2, [r3, #16]
	SPI_transmit_recieve(CMD_W_REGISTER | reg);
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff89 	bl	80004a0 <SPI_transmit_recieve>
	SPI_transmit_recieve(byte);
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff85 	bl	80004a0 <SPI_transmit_recieve>
	CSN_HIGH;
 8000596:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <NRF_write_reg8+0x3c>)
 8000598:	2210      	movs	r2, #16
 800059a:	611a      	str	r2, [r3, #16]
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40010800 	.word	0x40010800

080005a8 <NRF_read_reg8>:

uint8_t NRF_read_reg8( uint8_t reg ){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	CSN_LOW;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <NRF_read_reg8+0x34>)
 80005b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005b8:	611a      	str	r2, [r3, #16]
	SPI_transmit_recieve(CMD_R_REGISTER | reg);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff6f 	bl	80004a0 <SPI_transmit_recieve>
	uint8_t byte = SPI_transmit_recieve(0);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff ff6c 	bl	80004a0 <SPI_transmit_recieve>
 80005c8:	4603      	mov	r3, r0
 80005ca:	73fb      	strb	r3, [r7, #15]
	CSN_HIGH;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <NRF_read_reg8+0x34>)
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
	return byte;
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40010800 	.word	0x40010800

080005e0 <NRF_is_connected>:

uint8_t NRF_is_connected(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	uint8_t old =  NRF_read_reg8(0);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ffde 	bl	80005a8 <NRF_read_reg8>
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
	NRF_write_reg8(0, 0x0f);
 80005f0:	210f      	movs	r1, #15
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff ffb8 	bl	8000568 <NRF_write_reg8>
	uint8_t read = NRF_read_reg8(0);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ffd5 	bl	80005a8 <NRF_read_reg8>
 80005fe:	4603      	mov	r3, r0
 8000600:	71bb      	strb	r3, [r7, #6]
	NRF_write_reg8(0,old);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	4619      	mov	r1, r3
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ffae 	bl	8000568 <NRF_write_reg8>
	if(read == 0x0f) return 1; else return 0;
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b0f      	cmp	r3, #15
 8000610:	d101      	bne.n	8000616 <NRF_is_connected+0x36>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <NRF_is_connected+0x38>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <NRF_RX_mode>:
uint8_t rx_addr4[5] = {0x04,0x04};
uint8_t rx_addr5[5] = {0x05,0x05};

uint8_t tx_addr[5] = {0xf0,0xf0,0xf0,0xf0,0xf0};
#endif
void NRF_RX_mode(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	CE_LOW;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <NRF_RX_mode+0x38>)
 8000626:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800062a:	611a      	str	r2, [r3, #16]
	NRF_write_reg8(REG_CONFIG, NRF_read_reg8(REG_CONFIG) | (1<<CONFIG_PRIM_RX) );
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ffbb 	bl	80005a8 <NRF_read_reg8>
 8000632:	4603      	mov	r3, r0
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ff93 	bl	8000568 <NRF_write_reg8>
	CE_HIGH;
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <NRF_RX_mode+0x38>)
 8000644:	2208      	movs	r2, #8
 8000646:	611a      	str	r2, [r3, #16]
	LoopDelay(10000);
 8000648:	f242 7010 	movw	r0, #10000	; 0x2710
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	f7ff ff0e 	bl	8000470 <LoopDelay>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40010800 	.word	0x40010800

0800065c <NRF_TX_mode>:

void NRF_TX_mode(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	CE_LOW;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <NRF_TX_mode+0x48>)
 8000662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000666:	611a      	str	r2, [r3, #16]
	NRF_write_reg8(REG_CONFIG, NRF_read_reg8(REG_CONFIG) & (~(1<<CONFIG_PRIM_RX)) );
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff ff9d 	bl	80005a8 <NRF_read_reg8>
 800066e:	4603      	mov	r3, r0
 8000670:	f023 0301 	bic.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ff75 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_CONFIG, NRF_read_reg8(REG_CONFIG) | ((1<<CONFIG_PWR_UP)) );
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff92 	bl	80005a8 <NRF_read_reg8>
 8000684:	4603      	mov	r3, r0
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff ff6a 	bl	8000568 <NRF_write_reg8>
	LoopDelay(10000);
 8000694:	f242 7010 	movw	r0, #10000	; 0x2710
 8000698:	f04f 0100 	mov.w	r1, #0
 800069c:	f7ff fee8 	bl	8000470 <LoopDelay>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010800 	.word	0x40010800

080006a8 <NRF_send_packet>:

void NRF_send_packet( uint8_t* data, uint8_t len){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	NRF_write_command(CMD_W_TX_PAYLOAD, data, len);
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	461a      	mov	r2, r3
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	20a0      	movs	r0, #160	; 0xa0
 80006bc:	f7ff ff36 	bl	800052c <NRF_write_command>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <NRF_init>:

void NRF_init(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	LoopDelay(100000);
 80006cc:	4830      	ldr	r0, [pc, #192]	; (8000790 <NRF_init+0xc8>)
 80006ce:	f04f 0100 	mov.w	r1, #0
 80006d2:	f7ff fecd 	bl	8000470 <LoopDelay>
//	Register : 0x17 (FIFO_STATUS) 0x11
//	Register : 0x1C (DYNPD) 0x00
//	Register : 0x1D (FEATURE) 0x00
	//
#endif
	NRF_write_reg8(REG_EN_AA, 0x3F);		//enable AA on all pipes
 80006d6:	213f      	movs	r1, #63	; 0x3f
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff45 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_EN_RXADDR, 0x3F);	//enable all RX adresses
 80006de:	213f      	movs	r1, #63	; 0x3f
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff ff41 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_SETUP_AW, 0x03);		//set adress witdh to 5bytes
 80006e6:	2103      	movs	r1, #3
 80006e8:	2003      	movs	r0, #3
 80006ea:	f7ff ff3d 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_SETUP_RETR, 0xe6);	//set retransimition data
 80006ee:	21e6      	movs	r1, #230	; 0xe6
 80006f0:	2004      	movs	r0, #4
 80006f2:	f7ff ff39 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_RF_CH, 80);		//set rf channel
 80006f6:	2150      	movs	r1, #80	; 0x50
 80006f8:	2005      	movs	r0, #5
 80006fa:	f7ff ff35 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_RF_SETUP, 0x00);		//set power to max
 80006fe:	2100      	movs	r1, #0
 8000700:	2006      	movs	r0, #6
 8000702:	f7ff ff31 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_STATUS, 0x70);		//clear interrupts
 8000706:	2170      	movs	r1, #112	; 0x70
 8000708:	2007      	movs	r0, #7
 800070a:	f7ff ff2d 	bl	8000568 <NRF_write_reg8>
	NRF_write_command(CMD_W_REGISTER | REG_RX_ADDR_P0, rx_addr0, 5);
 800070e:	2205      	movs	r2, #5
 8000710:	4920      	ldr	r1, [pc, #128]	; (8000794 <NRF_init+0xcc>)
 8000712:	202a      	movs	r0, #42	; 0x2a
 8000714:	f7ff ff0a 	bl	800052c <NRF_write_command>
	NRF_write_command(CMD_W_REGISTER | REG_RX_ADDR_P1, rx_addr1, 5);
 8000718:	2205      	movs	r2, #5
 800071a:	491f      	ldr	r1, [pc, #124]	; (8000798 <NRF_init+0xd0>)
 800071c:	202b      	movs	r0, #43	; 0x2b
 800071e:	f7ff ff05 	bl	800052c <NRF_write_command>
	NRF_write_command(CMD_W_REGISTER | REG_RX_ADDR_P2, rx_addr2, 2);
 8000722:	2202      	movs	r2, #2
 8000724:	491d      	ldr	r1, [pc, #116]	; (800079c <NRF_init+0xd4>)
 8000726:	202c      	movs	r0, #44	; 0x2c
 8000728:	f7ff ff00 	bl	800052c <NRF_write_command>
	NRF_write_command(CMD_W_REGISTER | REG_RX_ADDR_P3, rx_addr3, 2);
 800072c:	2202      	movs	r2, #2
 800072e:	491c      	ldr	r1, [pc, #112]	; (80007a0 <NRF_init+0xd8>)
 8000730:	202d      	movs	r0, #45	; 0x2d
 8000732:	f7ff fefb 	bl	800052c <NRF_write_command>
	NRF_write_command(CMD_W_REGISTER | REG_RX_ADDR_P4, rx_addr4, 2);
 8000736:	2202      	movs	r2, #2
 8000738:	491a      	ldr	r1, [pc, #104]	; (80007a4 <NRF_init+0xdc>)
 800073a:	202e      	movs	r0, #46	; 0x2e
 800073c:	f7ff fef6 	bl	800052c <NRF_write_command>
	NRF_write_command(CMD_W_REGISTER | REG_RX_ADDR_P5, rx_addr5, 2);
 8000740:	2202      	movs	r2, #2
 8000742:	4919      	ldr	r1, [pc, #100]	; (80007a8 <NRF_init+0xe0>)
 8000744:	202f      	movs	r0, #47	; 0x2f
 8000746:	f7ff fef1 	bl	800052c <NRF_write_command>
	NRF_write_command(CMD_W_REGISTER | REG_TX_ADDR, tx_addr, 5);
 800074a:	2205      	movs	r2, #5
 800074c:	4917      	ldr	r1, [pc, #92]	; (80007ac <NRF_init+0xe4>)
 800074e:	2030      	movs	r0, #48	; 0x30
 8000750:	f7ff feec 	bl	800052c <NRF_write_command>
	NRF_write_reg8(REG_DYNPD, 0x3f);	//3f	//all pipes variable length
 8000754:	213f      	movs	r1, #63	; 0x3f
 8000756:	201c      	movs	r0, #28
 8000758:	f7ff ff06 	bl	8000568 <NRF_write_reg8>
	NRF_write_reg8(REG_FEATURE, 0x04);	//04	//enable features
 800075c:	2104      	movs	r1, #4
 800075e:	201d      	movs	r0, #29
 8000760:	f7ff ff02 	bl	8000568 <NRF_write_reg8>

	NRF_write_reg8(REG_CONFIG, NRF_read_reg8(REG_CONFIG) | (1<<CONFIG_PWR_UP) );		//enable features
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ff1f 	bl	80005a8 <NRF_read_reg8>
 800076a:	4603      	mov	r3, r0
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fef7 	bl	8000568 <NRF_write_reg8>
	LoopDelay(65000);
 800077a:	f64f 50e8 	movw	r0, #65000	; 0xfde8
 800077e:	f04f 0100 	mov.w	r1, #0
 8000782:	f7ff fe75 	bl	8000470 <LoopDelay>

	NRF_RX_mode();
 8000786:	f7ff ff4b 	bl	8000620 <NRF_RX_mode>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	000186a0 	.word	0x000186a0
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000010 	.word	0x20000010
 80007a0:	20000018 	.word	0x20000018
 80007a4:	20000020 	.word	0x20000020
 80007a8:	20000028 	.word	0x20000028
 80007ac:	20000030 	.word	0x20000030

080007b0 <debug_uart_str_event>:

void debug_uart_str_event(char * str){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	debug_uart_puts(str);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fda3 	bl	8000304 <debug_uart_puts>
	debug_uart_puts("\r\n");
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <debug_uart_str_event+0x1c>)
 80007c0:	f7ff fda0 	bl	8000304 <debug_uart_puts>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	08000df0 	.word	0x08000df0

080007d0 <main>:

int main(void){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

	//processor starts up with pll configured for 72Mhz. (we will change it in future to make it fail-save) Let's change that for now to 36Mhz

	RCC->CR |= (RCC_CR_HSION);					//turn on HSI oscillator (8Mhz)
 80007d6:	4aa3      	ldr	r2, [pc, #652]	; (8000a64 <main+0x294>)
 80007d8:	4ba2      	ldr	r3, [pc, #648]	; (8000a64 <main+0x294>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));			//wait until oscillator starts
 80007e2:	bf00      	nop
 80007e4:	4b9f      	ldr	r3, [pc, #636]	; (8000a64 <main+0x294>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0f9      	beq.n	80007e4 <main+0x14>

	RCC->CFGR &= ~(RCC_CFGR_SW);				//set SYSCLK to HSI (for the PLL configuration)
 80007f0:	4a9c      	ldr	r2, [pc, #624]	; (8000a64 <main+0x294>)
 80007f2:	4b9c      	ldr	r3, [pc, #624]	; (8000a64 <main+0x294>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f023 0303 	bic.w	r3, r3, #3
 80007fa:	6053      	str	r3, [r2, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);	//wait until it switches
 80007fc:	bf00      	nop
 80007fe:	4b99      	ldr	r3, [pc, #612]	; (8000a64 <main+0x294>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f003 030c 	and.w	r3, r3, #12
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f9      	bne.n	80007fe <main+0x2e>

	RCC->CR &= ~(RCC_CR_PLLON);					//turn off PLL (to be able to change parameters)
 800080a:	4a96      	ldr	r2, [pc, #600]	; (8000a64 <main+0x294>)
 800080c:	4b95      	ldr	r3, [pc, #596]	; (8000a64 <main+0x294>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000814:	6013      	str	r3, [r2, #0]

	RCC->CFGR &= ~(RCC_CFGR_PLLSRC);			//select PLL input as HSI/2
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <main+0x294>)
 8000818:	4b92      	ldr	r3, [pc, #584]	; (8000a64 <main+0x294>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000820:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);			//set PLL multiplier to x9
 8000822:	4a90      	ldr	r2, [pc, #576]	; (8000a64 <main+0x294>)
 8000824:	4b8f      	ldr	r3, [pc, #572]	; (8000a64 <main+0x294>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800082c:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON;					//turn PLL back on
 800082e:	4a8d      	ldr	r2, [pc, #564]	; (8000a64 <main+0x294>)
 8000830:	4b8c      	ldr	r3, [pc, #560]	; (8000a64 <main+0x294>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000838:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));			//wait until it locks
 800083a:	bf00      	nop
 800083c:	4b89      	ldr	r3, [pc, #548]	; (8000a64 <main+0x294>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f9      	beq.n	800083c <main+0x6c>

	RCC->CFGR = (RCC->CFGR | RCC_CFGR_SW_1) | (RCC->CFGR & ~(RCC_CFGR_SW_0)); 	//set SYSCLK to PLL
 8000848:	4986      	ldr	r1, [pc, #536]	; (8000a64 <main+0x294>)
 800084a:	4b86      	ldr	r3, [pc, #536]	; (8000a64 <main+0x294>)
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	4b85      	ldr	r3, [pc, #532]	; (8000a64 <main+0x294>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	4313      	orrs	r3, r2
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	604b      	str	r3, [r1, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	//wait until it switches
 800085e:	bf00      	nop
 8000860:	4b80      	ldr	r3, [pc, #512]	; (8000a64 <main+0x294>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	f003 030c 	and.w	r3, r3, #12
 8000868:	2b08      	cmp	r3, #8
 800086a:	d1f9      	bne.n	8000860 <main+0x90>

	RCC->CFGR |= (RCC_CFGR_MCO_SYSCLK);			//set MCO to output sysclk
 800086c:	4a7d      	ldr	r2, [pc, #500]	; (8000a64 <main+0x294>)
 800086e:	4b7d      	ldr	r3, [pc, #500]	; (8000a64 <main+0x294>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000876:	6053      	str	r3, [r2, #4]

	RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN);		//enable Clock for GPIOC periph
 8000878:	4a7a      	ldr	r2, [pc, #488]	; (8000a64 <main+0x294>)
 800087a:	4b7a      	ldr	r3, [pc, #488]	; (8000a64 <main+0x294>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN);		//enable Clock for GPIOA periph
 8000884:	4a77      	ldr	r2, [pc, #476]	; (8000a64 <main+0x294>)
 8000886:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <main+0x294>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]

	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		//enable Clock for GPIOA periph
 8000890:	4a74      	ldr	r2, [pc, #464]	; (8000a64 <main+0x294>)
 8000892:	4b74      	ldr	r3, [pc, #464]	; (8000a64 <main+0x294>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800089a:	6193      	str	r3, [r2, #24]

	//mco output
	GPIOA->CRH |= GPIO_CRH_MODE8;				//set PA8 as output with drive strenght to 50Mhz
 800089c:	4a72      	ldr	r2, [pc, #456]	; (8000a68 <main+0x298>)
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <main+0x298>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f043 0303 	orr.w	r3, r3, #3
 80008a6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF8_1) & ~(GPIO_CRH_CNF8_0));	//set PA8 to push-pull alternate function
 80008a8:	4a6f      	ldr	r2, [pc, #444]	; (8000a68 <main+0x298>)
 80008aa:	4b6f      	ldr	r3, [pc, #444]	; (8000a68 <main+0x298>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f023 030c 	bic.w	r3, r3, #12
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	6053      	str	r3, [r2, #4]

	//uart i/o
	GPIOA->CRH |= GPIO_CRH_MODE9;				//set PA9 as output with drive strenght to 50Mhz
 80008b8:	4a6b      	ldr	r2, [pc, #428]	; (8000a68 <main+0x298>)
 80008ba:	4b6b      	ldr	r3, [pc, #428]	; (8000a68 <main+0x298>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80008c2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF9_1) & ~(GPIO_CRH_CNF9_0));	//set PA9 to push-pull alternate function
 80008c4:	4a68      	ldr	r2, [pc, #416]	; (8000a68 <main+0x298>)
 80008c6:	4b68      	ldr	r3, [pc, #416]	; (8000a68 <main+0x298>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80008ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_MODE10);				//set PA10 as output with drive strenght to 50Mhz
 80008d4:	4a64      	ldr	r2, [pc, #400]	; (8000a68 <main+0x298>)
 80008d6:	4b64      	ldr	r3, [pc, #400]	; (8000a68 <main+0x298>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH = ((GPIOA->CRH | GPIO_CRH_CNF10_1) & ~(GPIO_CRH_CNF10_0));	//set PA10 to push-pull alternate function
 80008e0:	4a61      	ldr	r2, [pc, #388]	; (8000a68 <main+0x298>)
 80008e2:	4b61      	ldr	r3, [pc, #388]	; (8000a68 <main+0x298>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ee:	6053      	str	r3, [r2, #4]

	//onboard led
	GPIOC->CRH |= GPIO_CRH_MODE8_0;				//set PC8 as output with drive strenght to 10Mhz
 80008f0:	4a5e      	ldr	r2, [pc, #376]	; (8000a6c <main+0x29c>)
 80008f2:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <main+0x29c>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF8_1);	//set PC8 to push-pull normal operation
 80008fc:	4a5b      	ldr	r2, [pc, #364]	; (8000a6c <main+0x29c>)
 80008fe:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <main+0x29c>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f023 030c 	bic.w	r3, r3, #12
 8000906:	6053      	str	r3, [r2, #4]

	//spi to alternate
	GPIOA->CRL |= GPIO_CRL_MODE5 | GPIO_CRL_MODE6 | GPIO_CRL_MODE7;	//output 50Mhz
 8000908:	4a57      	ldr	r2, [pc, #348]	; (8000a68 <main+0x298>)
 800090a:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <main+0x298>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 8000912:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000916:	6013      	str	r3, [r2, #0]
	GPIOA->CRL = ((GPIOA->CRL | GPIO_CRL_CNF5_1 | GPIO_CRL_CNF6_1 | GPIO_CRL_CNF7_1) & ~((GPIO_CRL_CNF5_0) | (GPIO_CRL_CNF6_0) | (GPIO_CRL_CNF7_0)));	//alternate funcion push-pull
 8000918:	4a53      	ldr	r2, [pc, #332]	; (8000a68 <main+0x298>)
 800091a:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <main+0x298>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 8000922:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000926:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 800092a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800092e:	6013      	str	r3, [r2, #0]

	//ce csn to output
	GPIOA->CRL |= GPIO_CRL_MODE3_0 | GPIO_CRL_MODE4_0;	//output 50Mhz
 8000930:	4a4d      	ldr	r2, [pc, #308]	; (8000a68 <main+0x298>)
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <main+0x298>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f443 3388 	orr.w	r3, r3, #69632	; 0x11000
 800093a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_CNF4);	//push-pull normal i/o
 800093c:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <main+0x298>)
 800093e:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <main+0x298>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f423 234c 	bic.w	r3, r3, #835584	; 0xcc000
 8000946:	6013      	str	r3, [r2, #0]

	//irq to input
	GPIOA->CRL &= ~(GPIO_CRL_MODE2);	//input
 8000948:	4a47      	ldr	r2, [pc, #284]	; (8000a68 <main+0x298>)
 800094a:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <main+0x298>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000952:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 8000954:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <main+0x298>)
 8000956:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <main+0x298>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800095e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_CNF2_1);	//input pupd
 8000960:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <main+0x298>)
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <main+0x298>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800096a:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (GPIO_ODR_ODR2);		//pullup
 800096c:	4a3e      	ldr	r2, [pc, #248]	; (8000a68 <main+0x298>)
 800096e:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <main+0x298>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	60d3      	str	r3, [r2, #12]

	CSN_HIGH;
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <main+0x298>)
 800097a:	2210      	movs	r2, #16
 800097c:	611a      	str	r2, [r3, #16]

	//spi config
	SPI1->CR1 |= ( SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_MSTR | SPI_CR1_BR_1 );	//set internal ss pin to high, master mode, and baud to /8
 800097e:	4a3c      	ldr	r2, [pc, #240]	; (8000a70 <main+0x2a0>)
 8000980:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <main+0x2a0>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b29b      	uxth	r3, r3
 8000986:	f443 7345 	orr.w	r3, r3, #788	; 0x314
 800098a:	b29b      	uxth	r3, r3
 800098c:	8013      	strh	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;	//enable spi
 800098e:	4a38      	ldr	r2, [pc, #224]	; (8000a70 <main+0x2a0>)
 8000990:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <main+0x2a0>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099a:	b29b      	uxth	r3, r3
 800099c:	8013      	strh	r3, [r2, #0]

	debug_uart_init();
 800099e:	f7ff fc57 	bl	8000250 <debug_uart_init>
	register_debug_uart_event_callback(debug_uart_str_event);
 80009a2:	4834      	ldr	r0, [pc, #208]	; (8000a74 <main+0x2a4>)
 80009a4:	f7ff fc46 	bl	8000234 <register_debug_uart_event_callback>
	NVIC_EnableIRQ(USART1_IRQn);
 80009a8:	2025      	movs	r0, #37	; 0x25
 80009aa:	f7ff fd49 	bl	8000440 <NVIC_EnableIRQ>

	if(NRF_is_connected()){
 80009ae:	f7ff fe17 	bl	80005e0 <NRF_is_connected>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d016      	beq.n	80009e6 <main+0x216>
		for(uint8_t i = 0; i<10; i++){
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e00d      	b.n	80009da <main+0x20a>
			GPIOC->ODR ^= GPIO_ODR_ODR8;
 80009be:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <main+0x29c>)
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <main+0x29c>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80009c8:	60d3      	str	r3, [r2, #12]
			LoopDelay(100000);
 80009ca:	482b      	ldr	r0, [pc, #172]	; (8000a78 <main+0x2a8>)
 80009cc:	f04f 0100 	mov.w	r1, #0
 80009d0:	f7ff fd4e 	bl	8000470 <LoopDelay>
		for(uint8_t i = 0; i<10; i++){
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	3301      	adds	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d9ee      	bls.n	80009be <main+0x1ee>
		}

		NRF_init();
 80009e0:	f7ff fe72 	bl	80006c8 <NRF_init>
 80009e4:	e013      	b.n	8000a0e <main+0x23e>

	}else{
		for(uint8_t i = 0; i<8; i++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	73bb      	strb	r3, [r7, #14]
 80009ea:	e00d      	b.n	8000a08 <main+0x238>
			GPIOC->ODR ^= GPIO_ODR_ODR8;
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <main+0x29c>)
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <main+0x29c>)
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80009f6:	60d3      	str	r3, [r2, #12]
			LoopDelay(1000000);
 80009f8:	4820      	ldr	r0, [pc, #128]	; (8000a7c <main+0x2ac>)
 80009fa:	f04f 0100 	mov.w	r1, #0
 80009fe:	f7ff fd37 	bl	8000470 <LoopDelay>
		for(uint8_t i = 0; i<8; i++){
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	3301      	adds	r3, #1
 8000a06:	73bb      	strb	r3, [r7, #14]
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d9ee      	bls.n	80009ec <main+0x21c>
		}
	}
	debug_uart_puts("start\r\n");
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x2b0>)
 8000a10:	f7ff fc78 	bl	8000304 <debug_uart_puts>
			GPIOC->ODR ^= GPIO_ODR_ODR8;

		}
#else

		uint8_t data[3] = {0xaa,0xff,0x55};
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <main+0x2b4>)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	6812      	ldr	r2, [r2, #0]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	8019      	strh	r1, [r3, #0]
 8000a1e:	3302      	adds	r3, #2
 8000a20:	0c12      	lsrs	r2, r2, #16
 8000a22:	701a      	strb	r2, [r3, #0]

		NRF_write_command(CMD_FLUSH_TX, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	20e1      	movs	r0, #225	; 0xe1
 8000a2a:	f7ff fd7f 	bl	800052c <NRF_write_command>
		NRF_TX_mode();
 8000a2e:	f7ff fe15 	bl	800065c <NRF_TX_mode>

		NRF_send_packet(data, 3);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2103      	movs	r1, #3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe36 	bl	80006a8 <NRF_send_packet>


		CE_HIGH;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <main+0x298>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	611a      	str	r2, [r3, #16]
		LoopDelay(20);
 8000a42:	f04f 0014 	mov.w	r0, #20
 8000a46:	f04f 0100 	mov.w	r1, #0
 8000a4a:	f7ff fd11 	bl	8000470 <LoopDelay>
		CE_LOW;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <main+0x298>)
 8000a50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a54:	611a      	str	r2, [r3, #16]

		LoopDelay(500);
 8000a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5a:	f04f 0100 	mov.w	r1, #0
 8000a5e:	f7ff fd07 	bl	8000470 <LoopDelay>

		while(GPIOA->IDR & GPIO_IDR_IDR2)LoopDelay(10000);;
 8000a62:	e017      	b.n	8000a94 <main+0x2c4>
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40013000 	.word	0x40013000
 8000a74:	080007b1 	.word	0x080007b1
 8000a78:	000186a0 	.word	0x000186a0
 8000a7c:	000f4240 	.word	0x000f4240
 8000a80:	08000df4 	.word	0x08000df4
 8000a84:	08000e0c 	.word	0x08000e0c
 8000a88:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a8c:	f04f 0100 	mov.w	r1, #0
 8000a90:	f7ff fcee 	bl	8000470 <LoopDelay>
 8000a94:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <main+0x38c>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f3      	bne.n	8000a88 <main+0x2b8>
		LoopDelay(10000);
 8000aa0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aa4:	f04f 0100 	mov.w	r1, #0
 8000aa8:	f7ff fce2 	bl	8000470 <LoopDelay>
		uint8_t ob1 = NRF_read_reg8(REG_OBSERVE_TX);
 8000aac:	2008      	movs	r0, #8
 8000aae:	f7ff fd7b 	bl	80005a8 <NRF_read_reg8>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	72fb      	strb	r3, [r7, #11]
		uint8_t stat = NRF_read_reg8(REG_STATUS);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f7ff fd76 	bl	80005a8 <NRF_read_reg8>
 8000abc:	4603      	mov	r3, r0
 8000abe:	72bb      	strb	r3, [r7, #10]

		if(stat & (1<<STATUS_MAX_RT) ){
 8000ac0:	7abb      	ldrb	r3, [r7, #10]
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d01a      	beq.n	8000b00 <main+0x330>
			debug_uart_puts("max\r\n");
 8000aca:	4825      	ldr	r0, [pc, #148]	; (8000b60 <main+0x390>)
 8000acc:	f7ff fc1a 	bl	8000304 <debug_uart_puts>
			debug_uart_putc(ob1);
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fbf0 	bl	80002b8 <debug_uart_putc>
			for(uint8_t i = 0; i<2; i++){
 8000ad8:	2300      	movs	r3, #0
 8000ada:	737b      	strb	r3, [r7, #13]
 8000adc:	e00d      	b.n	8000afa <main+0x32a>
				GPIOC->ODR ^= GPIO_ODR_ODR8;
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <main+0x394>)
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <main+0x394>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8000ae8:	60d3      	str	r3, [r2, #12]
				LoopDelay(100000);
 8000aea:	481f      	ldr	r0, [pc, #124]	; (8000b68 <main+0x398>)
 8000aec:	f04f 0100 	mov.w	r1, #0
 8000af0:	f7ff fcbe 	bl	8000470 <LoopDelay>
			for(uint8_t i = 0; i<2; i++){
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	3301      	adds	r3, #1
 8000af8:	737b      	strb	r3, [r7, #13]
 8000afa:	7b7b      	ldrb	r3, [r7, #13]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d9ee      	bls.n	8000ade <main+0x30e>
			}
		}
		if(stat & (1<<STATUS_TX_DS) ){
 8000b00:	7abb      	ldrb	r3, [r7, #10]
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d016      	beq.n	8000b38 <main+0x368>
			debug_uart_puts("ack\r\n");
 8000b0a:	4818      	ldr	r0, [pc, #96]	; (8000b6c <main+0x39c>)
 8000b0c:	f7ff fbfa 	bl	8000304 <debug_uart_puts>
			for(uint8_t i = 0; i<4; i++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	733b      	strb	r3, [r7, #12]
 8000b14:	e00d      	b.n	8000b32 <main+0x362>
				GPIOC->ODR ^= GPIO_ODR_ODR8;
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <main+0x394>)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <main+0x394>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8000b20:	60d3      	str	r3, [r2, #12]
				LoopDelay(100000);
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <main+0x398>)
 8000b24:	f04f 0100 	mov.w	r1, #0
 8000b28:	f7ff fca2 	bl	8000470 <LoopDelay>
			for(uint8_t i = 0; i<4; i++){
 8000b2c:	7b3b      	ldrb	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	733b      	strb	r3, [r7, #12]
 8000b32:	7b3b      	ldrb	r3, [r7, #12]
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d9ee      	bls.n	8000b16 <main+0x346>
			}
		}
		NRF_write_reg8(REG_STATUS, 0x10);		//clear interrupts
 8000b38:	2110      	movs	r1, #16
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f7ff fd14 	bl	8000568 <NRF_write_reg8>
		NRF_write_reg8(REG_STATUS, 0x20);		//clear interrupts
 8000b40:	2120      	movs	r1, #32
 8000b42:	2007      	movs	r0, #7
 8000b44:	f7ff fd10 	bl	8000568 <NRF_write_reg8>
		NRF_write_reg8(REG_STATUS, 0x40);		//clear interrupts
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	2007      	movs	r0, #7
 8000b4c:	f7ff fd0c 	bl	8000568 <NRF_write_reg8>
		LoopDelay(200000);
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <main+0x3a0>)
 8000b52:	f04f 0100 	mov.w	r1, #0
 8000b56:	f7ff fc8b 	bl	8000470 <LoopDelay>
	while (1){
 8000b5a:	e75b      	b.n	8000a14 <main+0x244>
 8000b5c:	40010800 	.word	0x40010800
 8000b60:	08000dfc 	.word	0x08000dfc
 8000b64:	40011000 	.word	0x40011000
 8000b68:	000186a0 	.word	0x000186a0
 8000b6c:	08000e04 	.word	0x08000e04
 8000b70:	00030d40 	.word	0x00030d40

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b7a:	e003      	b.n	8000b84 <LoopCopyDataInit>

08000b7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b82:	3104      	adds	r1, #4

08000b84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b8c:	d3f6      	bcc.n	8000b7c <CopyDataInit>
  ldr  r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b90:	e002      	b.n	8000b98 <LoopFillZerobss>

08000b92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b94:	f842 3b04 	str.w	r3, [r2], #4

08000b98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b9c:	d3f9      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b9e:	f000 f83d 	bl	8000c1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ba2:	f000 f8f5 	bl	8000d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fe13 	bl	80007d0 <main>
  bx  lr    
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bac:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000bb0:	08000e18 	.word	0x08000e18
  ldr  r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bb8:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8000bbc:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8000bc0:	2000016c 	.word	0x2000016c

08000bc4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>

08000bc6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c20:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <SystemInit+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <SystemInit+0x5c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c2c:	4912      	ldr	r1, [pc, #72]	; (8000c78 <SystemInit+0x5c>)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SystemInit+0x5c>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <SystemInit+0x60>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c38:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <SystemInit+0x5c>)
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SystemInit+0x5c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <SystemInit+0x5c>)
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <SystemInit+0x5c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <SystemInit+0x5c>)
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <SystemInit+0x5c>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SystemInit+0x5c>)
 8000c62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c66:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000c68:	f000 f80c 	bl	8000c84 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SystemInit+0x64>)
 8000c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c72:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	f8ff0000 	.word	0xf8ff0000
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000c88:	f000 f802 	bl	8000c90 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000c9e:	4a3a      	ldr	r2, [pc, #232]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000ca0:	4b39      	ldr	r3, [pc, #228]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000caa:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <SetSysClockTo72+0x38>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000cc6:	d1f0      	bne.n	8000caa <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	e001      	b.n	8000cde <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d14b      	bne.n	8000d7c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000ce4:	4a29      	ldr	r2, [pc, #164]	; (8000d8c <SetSysClockTo72+0xfc>)
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <SetSysClockTo72+0xfc>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000cf0:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <SetSysClockTo72+0xfc>)
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <SetSysClockTo72+0xfc>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000cfc:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <SetSysClockTo72+0xfc>)
 8000cfe:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <SetSysClockTo72+0xfc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d2e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d30:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000d3a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d46:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d48:	bf00      	nop
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f9      	beq.n	8000d4a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f023 0303 	bic.w	r3, r3, #3
 8000d60:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000d6e:	bf00      	nop
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SetSysClockTo72+0xf8>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d1f9      	bne.n	8000d70 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40022000 	.word	0x40022000

08000d90 <__libc_init_array>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	2500      	movs	r5, #0
 8000d94:	4e0c      	ldr	r6, [pc, #48]	; (8000dc8 <__libc_init_array+0x38>)
 8000d96:	4c0d      	ldr	r4, [pc, #52]	; (8000dcc <__libc_init_array+0x3c>)
 8000d98:	1ba4      	subs	r4, r4, r6
 8000d9a:	10a4      	asrs	r4, r4, #2
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	d109      	bne.n	8000db4 <__libc_init_array+0x24>
 8000da0:	f000 f81a 	bl	8000dd8 <_init>
 8000da4:	2500      	movs	r5, #0
 8000da6:	4e0a      	ldr	r6, [pc, #40]	; (8000dd0 <__libc_init_array+0x40>)
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <__libc_init_array+0x44>)
 8000daa:	1ba4      	subs	r4, r4, r6
 8000dac:	10a4      	asrs	r4, r4, #2
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d105      	bne.n	8000dbe <__libc_init_array+0x2e>
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db8:	4798      	blx	r3
 8000dba:	3501      	adds	r5, #1
 8000dbc:	e7ee      	b.n	8000d9c <__libc_init_array+0xc>
 8000dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc2:	4798      	blx	r3
 8000dc4:	3501      	adds	r5, #1
 8000dc6:	e7f2      	b.n	8000dae <__libc_init_array+0x1e>
 8000dc8:	08000e10 	.word	0x08000e10
 8000dcc:	08000e10 	.word	0x08000e10
 8000dd0:	08000e10 	.word	0x08000e10
 8000dd4:	08000e14 	.word	0x08000e14

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
