
TEST_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08000a10  08000a10  00010a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000b30  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000b34  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000024  08000b34  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001a87  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000529  00000000  00000000  00021ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000e0  00000000  00000000  00021fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000220c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000008b9  00000000  00000000  00022168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000bba  00000000  00000000  00022a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000235db  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000244  00000000  00000000  00023658  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002389c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	080009f8 	.word	0x080009f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	080009f8 	.word	0x080009f8

0800017c <LcdPrintChar>:

CODE uint16_t lcdDigitTab[10] = {
  0x003f, 0x0006, 0x045b, 0x040f,  0x0466, 0x046d, 0x047d, 0x0007, 0x047f, 0x046f,
};

void LcdPrintChar(uint8_t digit, char c) {
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	460a      	mov	r2, r1
 8000186:	71fb      	strb	r3, [r7, #7]
 8000188:	4613      	mov	r3, r2
 800018a:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  uint16_t a;

  digit = digit % 6;
 800018c:	79fa      	ldrb	r2, [r7, #7]
 800018e:	4b3a      	ldr	r3, [pc, #232]	; (8000278 <LcdPrintChar+0xfc>)
 8000190:	fba3 1302 	umull	r1, r3, r3, r2
 8000194:	0899      	lsrs	r1, r3, #2
 8000196:	460b      	mov	r3, r1
 8000198:	005b      	lsls	r3, r3, #1
 800019a:	440b      	add	r3, r1
 800019c:	005b      	lsls	r3, r3, #1
 800019e:	1ad3      	subs	r3, r2, r3
 80001a0:	71fb      	strb	r3, [r7, #7]
  if ((c >= '0') && (c <= '9')) a = lcdDigitTab[c - '0'];
 80001a2:	79bb      	ldrb	r3, [r7, #6]
 80001a4:	2b2f      	cmp	r3, #47	; 0x2f
 80001a6:	d909      	bls.n	80001bc <LcdPrintChar+0x40>
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	2b39      	cmp	r3, #57	; 0x39
 80001ac:	d806      	bhi.n	80001bc <LcdPrintChar+0x40>
 80001ae:	79bb      	ldrb	r3, [r7, #6]
 80001b0:	3b30      	subs	r3, #48	; 0x30
 80001b2:	4a32      	ldr	r2, [pc, #200]	; (800027c <LcdPrintChar+0x100>)
 80001b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001b8:	81bb      	strh	r3, [r7, #12]
 80001ba:	e022      	b.n	8000202 <LcdPrintChar+0x86>
  else if ((c >= 'a') && (c <= 'z')) a = lcdAlphaTab[c - 'a'];
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	2b60      	cmp	r3, #96	; 0x60
 80001c0:	d909      	bls.n	80001d6 <LcdPrintChar+0x5a>
 80001c2:	79bb      	ldrb	r3, [r7, #6]
 80001c4:	2b7a      	cmp	r3, #122	; 0x7a
 80001c6:	d806      	bhi.n	80001d6 <LcdPrintChar+0x5a>
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	3b61      	subs	r3, #97	; 0x61
 80001cc:	4a2c      	ldr	r2, [pc, #176]	; (8000280 <LcdPrintChar+0x104>)
 80001ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d2:	81bb      	strh	r3, [r7, #12]
 80001d4:	e015      	b.n	8000202 <LcdPrintChar+0x86>
  else if ((c >= 'A') && (c <= 'Z')) a = lcdAlphaTab[c - 'A'];
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	2b40      	cmp	r3, #64	; 0x40
 80001da:	d909      	bls.n	80001f0 <LcdPrintChar+0x74>
 80001dc:	79bb      	ldrb	r3, [r7, #6]
 80001de:	2b5a      	cmp	r3, #90	; 0x5a
 80001e0:	d806      	bhi.n	80001f0 <LcdPrintChar+0x74>
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	3b41      	subs	r3, #65	; 0x41
 80001e6:	4a26      	ldr	r2, [pc, #152]	; (8000280 <LcdPrintChar+0x104>)
 80001e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ec:	81bb      	strh	r3, [r7, #12]
 80001ee:	e008      	b.n	8000202 <LcdPrintChar+0x86>
  else if (c == ' ') a = 0x0000;
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	2b20      	cmp	r3, #32
 80001f4:	d102      	bne.n	80001fc <LcdPrintChar+0x80>
 80001f6:	2300      	movs	r3, #0
 80001f8:	81bb      	strh	r3, [r7, #12]
 80001fa:	e002      	b.n	8000202 <LcdPrintChar+0x86>
  else a = 0x0440; // --
 80001fc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000200:	81bb      	strh	r3, [r7, #12]
  for (i = 0; i < 14; i++) {
 8000202:	2300      	movs	r3, #0
 8000204:	73fb      	strb	r3, [r7, #15]
 8000206:	e02f      	b.n	8000268 <LcdPrintChar+0xec>
	  LCD_SEG(digit, i) = a & 1;
 8000208:	79fa      	ldrb	r2, [r7, #7]
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	491d      	ldr	r1, [pc, #116]	; (8000284 <LcdPrintChar+0x108>)
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	4413      	add	r3, r2
 8000212:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	4618      	mov	r0, r3
 800021a:	79fa      	ldrb	r2, [r7, #7]
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4919      	ldr	r1, [pc, #100]	; (8000284 <LcdPrintChar+0x108>)
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	4413      	add	r3, r2
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	440b      	add	r3, r1
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	08db      	lsrs	r3, r3, #3
 800022c:	b2db      	uxtb	r3, r3
 800022e:	18c2      	adds	r2, r0, r3
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <LcdPrintChar+0x10c>)
 8000232:	4413      	add	r3, r2
 8000234:	015a      	lsls	r2, r3, #5
 8000236:	79f9      	ldrb	r1, [r7, #7]
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	4812      	ldr	r0, [pc, #72]	; (8000284 <LcdPrintChar+0x108>)
 800023c:	0109      	lsls	r1, r1, #4
 800023e:	440b      	add	r3, r1
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	4403      	add	r3, r0
 8000244:	785b      	ldrb	r3, [r3, #1]
 8000246:	f003 0307 	and.w	r3, r3, #7
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	4413      	add	r3, r2
 800024e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000252:	461a      	mov	r2, r3
 8000254:	89bb      	ldrh	r3, [r7, #12]
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
	  a = a >> 1;
 800025c:	89bb      	ldrh	r3, [r7, #12]
 800025e:	085b      	lsrs	r3, r3, #1
 8000260:	81bb      	strh	r3, [r7, #12]
  for (i = 0; i < 14; i++) {
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	3301      	adds	r3, #1
 8000266:	73fb      	strb	r3, [r7, #15]
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	2b0d      	cmp	r3, #13
 800026c:	d9cc      	bls.n	8000208 <LcdPrintChar+0x8c>
  }
}
 800026e:	bf00      	nop
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	aaaaaaab 	.word	0xaaaaaaab
 800027c:	08000b14 	.word	0x08000b14
 8000280:	08000ae0 	.word	0x08000ae0
 8000284:	08000a20 	.word	0x08000a20
 8000288:	40002414 	.word	0x40002414

0800028c <LcdPrintString>:

void LcdPrintString( uint8_t start, char * str){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	6039      	str	r1, [r7, #0]
 8000296:	71fb      	strb	r3, [r7, #7]
	while(*str){
 8000298:	e017      	b.n	80002ca <LcdPrintString+0x3e>
		LcdPrintChar(start, *str);
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	781a      	ldrb	r2, [r3, #0]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4611      	mov	r1, r2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff6a 	bl	800017c <LcdPrintChar>
		str++;
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	603b      	str	r3, [r7, #0]
		start+=1;
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	3301      	adds	r3, #1
 80002b2:	71fb      	strb	r3, [r7, #7]
		start = start %6;
 80002b4:	79fa      	ldrb	r2, [r7, #7]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <LcdPrintString+0x50>)
 80002b8:	fba3 1302 	umull	r1, r3, r3, r2
 80002bc:	0899      	lsrs	r1, r3, #2
 80002be:	460b      	mov	r3, r1
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	440b      	add	r3, r1
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	71fb      	strb	r3, [r7, #7]
	while(*str){
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1e3      	bne.n	800029a <LcdPrintString+0xe>
	}
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	aaaaaaab 	.word	0xaaaaaaab

080002e0 <LcdPrintBar>:
		LCD_SEG(digit, i+14) = dots & 1;
		dots = dots >>1;
	}
}

void LcdPrintBar( uint8_t val ){
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<4; i++){
 80002ea:	2300      	movs	r3, #0
 80002ec:	73fb      	strb	r3, [r7, #15]
 80002ee:	e044      	b.n	800037a <LcdPrintBar+0x9a>
		LCD_SEG(5-(i/2) , (i%2)+14) = val & 1;
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	085b      	lsrs	r3, r3, #1
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	f1c3 0205 	rsb	r2, r3, #5
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	330e      	adds	r3, #14
 8000302:	4922      	ldr	r1, [pc, #136]	; (800038c <LcdPrintBar+0xac>)
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	4413      	add	r3, r2
 8000308:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800030c:	00db      	lsls	r3, r3, #3
 800030e:	4618      	mov	r0, r3
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	085b      	lsrs	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	f1c3 0205 	rsb	r2, r3, #5
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	330e      	adds	r3, #14
 8000322:	491a      	ldr	r1, [pc, #104]	; (800038c <LcdPrintBar+0xac>)
 8000324:	0112      	lsls	r2, r2, #4
 8000326:	4413      	add	r3, r2
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	440b      	add	r3, r1
 800032c:	785b      	ldrb	r3, [r3, #1]
 800032e:	08db      	lsrs	r3, r3, #3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	18c2      	adds	r2, r0, r3
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <LcdPrintBar+0xb0>)
 8000336:	4413      	add	r3, r2
 8000338:	015a      	lsls	r2, r3, #5
 800033a:	7bfb      	ldrb	r3, [r7, #15]
 800033c:	085b      	lsrs	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	f1c3 0105 	rsb	r1, r3, #5
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	330e      	adds	r3, #14
 800034c:	480f      	ldr	r0, [pc, #60]	; (800038c <LcdPrintBar+0xac>)
 800034e:	0109      	lsls	r1, r1, #4
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4403      	add	r3, r0
 8000356:	785b      	ldrb	r3, [r3, #1]
 8000358:	f003 0307 	and.w	r3, r3, #7
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000364:	461a      	mov	r2, r3
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]
	 	val = val>>1;
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	085b      	lsrs	r3, r3, #1
 8000372:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<4; i++){
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	3301      	adds	r3, #1
 8000378:	73fb      	strb	r3, [r7, #15]
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	2b03      	cmp	r3, #3
 800037e:	d9b7      	bls.n	80002f0 <LcdPrintBar+0x10>
	}
}
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	08000a20 	.word	0x08000a20
 8000390:	40002414 	.word	0x40002414

08000394 <LcdUpdate>:

void LcdUpdate(){
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	LCD->CLR |= (LCD_CLR_UDDC);
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <LcdUpdate+0x24>)
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <LcdUpdate+0x24>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	60d3      	str	r3, [r2, #12]
	LCD->SR |= (LCD_SR_UDR);
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <LcdUpdate+0x24>)
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <LcdUpdate+0x24>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6093      	str	r3, [r2, #8]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40002400 	.word	0x40002400

080003bc <LcdIoInit>:

void LcdIoInit(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	GPIOA->MODER |= (GPIO_MODER_MODER1_1)
 80003c0:	4936      	ldr	r1, [pc, #216]	; (800049c <LcdIoInit+0xe0>)
 80003c2:	4b36      	ldr	r3, [pc, #216]	; (800049c <LcdIoInit+0xe0>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <LcdIoInit+0xe4>)
 80003c8:	4313      	orrs	r3, r2
 80003ca:	600b      	str	r3, [r1, #0]
	| (GPIO_MODER_MODER8_1)
	| (GPIO_MODER_MODER9_1)
	| (GPIO_MODER_MODER10_1)
	| (GPIO_MODER_MODER15_1);

	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR1_1)
 80003cc:	4933      	ldr	r1, [pc, #204]	; (800049c <LcdIoInit+0xe0>)
 80003ce:	4b33      	ldr	r3, [pc, #204]	; (800049c <LcdIoInit+0xe0>)
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <LcdIoInit+0xe4>)
 80003d4:	4313      	orrs	r3, r2
 80003d6:	608b      	str	r3, [r1, #8]
	| (GPIO_OSPEEDER_OSPEEDR8_1)
	| (GPIO_OSPEEDER_OSPEEDR9_1)
	| (GPIO_OSPEEDER_OSPEEDR10_1)
	| (GPIO_OSPEEDER_OSPEEDR15_1);

	GPIOA->PUPDR &= ~((GPIO_PUPDR_PUPDR1_0) | (GPIO_PUPDR_PUPDR1_1)
 80003d8:	4930      	ldr	r1, [pc, #192]	; (800049c <LcdIoInit+0xe0>)
 80003da:	4b30      	ldr	r3, [pc, #192]	; (800049c <LcdIoInit+0xe0>)
 80003dc:	68da      	ldr	r2, [r3, #12]
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <LcdIoInit+0xe8>)
 80003e0:	4013      	ands	r3, r2
 80003e2:	60cb      	str	r3, [r1, #12]
	| (GPIO_PUPDR_PUPDR8_0) | (GPIO_PUPDR_PUPDR8_1)
	| (GPIO_PUPDR_PUPDR9_0) | (GPIO_PUPDR_PUPDR9_1)
	| (GPIO_PUPDR_PUPDR10_0) | (GPIO_PUPDR_PUPDR10_1)
	| (GPIO_PUPDR_PUPDR15_0) | (GPIO_PUPDR_PUPDR15_1));

	GPIOA->AFR[0] |= 0x0000BBB0;
 80003e4:	4a2d      	ldr	r2, [pc, #180]	; (800049c <LcdIoInit+0xe0>)
 80003e6:	4b2d      	ldr	r3, [pc, #180]	; (800049c <LcdIoInit+0xe0>)
 80003e8:	6a1b      	ldr	r3, [r3, #32]
 80003ea:	f443 433b 	orr.w	r3, r3, #47872	; 0xbb00
 80003ee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80003f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[1] |= 0xB0000BBB;
 80003f4:	4929      	ldr	r1, [pc, #164]	; (800049c <LcdIoInit+0xe0>)
 80003f6:	4b29      	ldr	r3, [pc, #164]	; (800049c <LcdIoInit+0xe0>)
 80003f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003fa:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <LcdIoInit+0xec>)
 80003fc:	4313      	orrs	r3, r2
 80003fe:	624b      	str	r3, [r1, #36]	; 0x24


	GPIOB->MODER |= (GPIO_MODER_MODER3_1)
 8000400:	492a      	ldr	r1, [pc, #168]	; (80004ac <LcdIoInit+0xf0>)
 8000402:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <LcdIoInit+0xf0>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <LcdIoInit+0xf4>)
 8000408:	4313      	orrs	r3, r2
 800040a:	600b      	str	r3, [r1, #0]
	| (GPIO_MODER_MODER12_1)
	| (GPIO_MODER_MODER13_1)
	| (GPIO_MODER_MODER14_1)
	| (GPIO_MODER_MODER15_1);

	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR3_1)
 800040c:	4927      	ldr	r1, [pc, #156]	; (80004ac <LcdIoInit+0xf0>)
 800040e:	4b27      	ldr	r3, [pc, #156]	; (80004ac <LcdIoInit+0xf0>)
 8000410:	689a      	ldr	r2, [r3, #8]
 8000412:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <LcdIoInit+0xf4>)
 8000414:	4313      	orrs	r3, r2
 8000416:	608b      	str	r3, [r1, #8]
	| (GPIO_OSPEEDER_OSPEEDR12_1)
	| (GPIO_OSPEEDER_OSPEEDR13_1)
	| (GPIO_OSPEEDER_OSPEEDR14_1)
	| (GPIO_OSPEEDER_OSPEEDR15_1);

	GPIOB->PUPDR &= ~((GPIO_PUPDR_PUPDR3_0) | (GPIO_PUPDR_PUPDR3_1)
 8000418:	4924      	ldr	r1, [pc, #144]	; (80004ac <LcdIoInit+0xf0>)
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <LcdIoInit+0xf0>)
 800041c:	68da      	ldr	r2, [r3, #12]
 800041e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000422:	4013      	ands	r3, r2
 8000424:	60cb      	str	r3, [r1, #12]
	| (GPIO_PUPDR_PUPDR12_0) | (GPIO_PUPDR_PUPDR12_1)
	| (GPIO_PUPDR_PUPDR13_0) | (GPIO_PUPDR_PUPDR13_1)
	| (GPIO_PUPDR_PUPDR14_0) | (GPIO_PUPDR_PUPDR14_1)
	| (GPIO_PUPDR_PUPDR15_0) | (GPIO_PUPDR_PUPDR15_1));

	GPIOB->AFR[0] |= 0x00BBB000;
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <LcdIoInit+0xf0>)
 8000428:	4b20      	ldr	r3, [pc, #128]	; (80004ac <LcdIoInit+0xf0>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	f443 033b 	orr.w	r3, r3, #12255232	; 0xbb0000
 8000430:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8000434:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[1] |= 0xBBBBBBBB;
 8000436:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <LcdIoInit+0xf0>)
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <LcdIoInit+0xf0>)
 800043a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043c:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8000440:	6253      	str	r3, [r2, #36]	; 0x24


	GPIOC->MODER |= (GPIO_MODER_MODER0_1)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <LcdIoInit+0xf8>)
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <LcdIoInit+0xf8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f043 13aa 	orr.w	r3, r3, #11141290	; 0xaa00aa
 800044c:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000450:	6013      	str	r3, [r2, #0]
	| (GPIO_MODER_MODER8_1)
	| (GPIO_MODER_MODER9_1)
	| (GPIO_MODER_MODER10_1)
	| (GPIO_MODER_MODER11_1);

	GPIOC->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR0_1)
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <LcdIoInit+0xf8>)
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <LcdIoInit+0xf8>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	f043 13aa 	orr.w	r3, r3, #11141290	; 0xaa00aa
 800045c:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000460:	6093      	str	r3, [r2, #8]
	| (GPIO_OSPEEDER_OSPEEDR8_1)
	| (GPIO_OSPEEDER_OSPEEDR9_1)
	| (GPIO_OSPEEDER_OSPEEDR10_1)
	| (GPIO_OSPEEDER_OSPEEDR11_1);

	GPIOC->PUPDR &= ~((GPIO_PUPDR_PUPDR0_0) | (GPIO_PUPDR_PUPDR0_1)
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <LcdIoInit+0xf8>)
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <LcdIoInit+0xf8>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800046c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000470:	60d3      	str	r3, [r2, #12]
	| (GPIO_PUPDR_PUPDR8_0) | (GPIO_PUPDR_PUPDR8_1)
	| (GPIO_PUPDR_PUPDR9_0) | (GPIO_PUPDR_PUPDR9_1)
	| (GPIO_PUPDR_PUPDR10_0) | (GPIO_PUPDR_PUPDR10_1)
	| (GPIO_PUPDR_PUPDR11_0) | (GPIO_PUPDR_PUPDR11_1));

	GPIOC->AFR[0] |= 0xBB00BBBB;
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <LcdIoInit+0xf8>)
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <LcdIoInit+0xf8>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	f043 23bb 	orr.w	r3, r3, #3137387264	; 0xbb00bb00
 800047c:	f043 03bb 	orr.w	r3, r3, #187	; 0xbb
 8000480:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= 0x0000BBBB;
 8000482:	4a0c      	ldr	r2, [pc, #48]	; (80004b4 <LcdIoInit+0xf8>)
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <LcdIoInit+0xf8>)
 8000486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000488:	f443 433b 	orr.w	r3, r3, #47872	; 0xbb00
 800048c:	f043 03bb 	orr.w	r3, r3, #187	; 0xbb
 8000490:	6253      	str	r3, [r2, #36]	; 0x24

}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40020000 	.word	0x40020000
 80004a0:	802a00a8 	.word	0x802a00a8
 80004a4:	3fc0ff03 	.word	0x3fc0ff03
 80004a8:	b0000bbb 	.word	0xb0000bbb
 80004ac:	40020400 	.word	0x40020400
 80004b0:	aaaa0a80 	.word	0xaaaa0a80
 80004b4:	40020800 	.word	0x40020800

080004b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004c2:	4908      	ldr	r1, [pc, #32]	; (80004e4 <NVIC_EnableIRQ+0x2c>)
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	095b      	lsrs	r3, r3, #5
 80004ca:	79fa      	ldrb	r2, [r7, #7]
 80004cc:	f002 021f 	and.w	r2, r2, #31
 80004d0:	2001      	movs	r0, #1
 80004d2:	fa00 f202 	lsl.w	r2, r0, r2
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <LoopDelay>:
#include "stm32l1xx.h"
#include "common.h"

#include "LCD/lcd.h"

void LoopDelay(volatile uint32_t n) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	while(n > 0) n--;
 80004f0:	e002      	b.n	80004f8 <LoopDelay+0x10>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1f9      	bne.n	80004f2 <LoopDelay+0xa>
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <main>:

int main(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

	//------------------------------------CLOCK CONFIGURATION

	RCC->APB1ENR |= (RCC_APB1ENR_PWREN);		//enable clock for PWRMGT peripheral
 800050c:	4aa3      	ldr	r2, [pc, #652]	; (800079c <main+0x294>)
 800050e:	4ba3      	ldr	r3, [pc, #652]	; (800079c <main+0x294>)
 8000510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000516:	6253      	str	r3, [r2, #36]	; 0x24
	PWR->CR |= PWR_CR_DBP;
 8000518:	4aa1      	ldr	r2, [pc, #644]	; (80007a0 <main+0x298>)
 800051a:	4ba1      	ldr	r3, [pc, #644]	; (80007a0 <main+0x298>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]

	while((PWR->CSR & PWR_CSR_VOSF));			//poll for voltage stabilization
 8000524:	bf00      	nop
 8000526:	4b9e      	ldr	r3, [pc, #632]	; (80007a0 <main+0x298>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	f003 0310 	and.w	r3, r3, #16
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f9      	bne.n	8000526 <main+0x1e>
	PWR->CR |= (PWR_CR_VOS_1);
 8000532:	4a9b      	ldr	r2, [pc, #620]	; (80007a0 <main+0x298>)
 8000534:	4b9a      	ldr	r3, [pc, #616]	; (80007a0 <main+0x298>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800053c:	6013      	str	r3, [r2, #0]
	PWR->CR |= (PWR_CR_VOS_0);
 800053e:	4a98      	ldr	r2, [pc, #608]	; (80007a0 <main+0x298>)
 8000540:	4b97      	ldr	r3, [pc, #604]	; (80007a0 <main+0x298>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000548:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~(PWR_CR_VOS_1);
 800054a:	4a95      	ldr	r2, [pc, #596]	; (80007a0 <main+0x298>)
 800054c:	4b94      	ldr	r3, [pc, #592]	; (80007a0 <main+0x298>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000554:	6013      	str	r3, [r2, #0]
	while((PWR->CSR & PWR_CSR_VOSF));			//poll for voltage stabilization
 8000556:	bf00      	nop
 8000558:	4b91      	ldr	r3, [pc, #580]	; (80007a0 <main+0x298>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f9      	bne.n	8000558 <main+0x50>

	RCC->CR |= (RCC_CR_HSION);					//enable high-speed internal oscillator
 8000564:	4a8d      	ldr	r2, [pc, #564]	; (800079c <main+0x294>)
 8000566:	4b8d      	ldr	r3, [pc, #564]	; (800079c <main+0x294>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));			//wait until oscillator starts
 8000570:	bf00      	nop
 8000572:	4b8a      	ldr	r3, [pc, #552]	; (800079c <main+0x294>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f9      	beq.n	8000572 <main+0x6a>

	RCC->CFGR |= RCC_CFGR_SW_HSI;				//set hsi as systemclk
 800057e:	4a87      	ldr	r2, [pc, #540]	; (800079c <main+0x294>)
 8000580:	4b86      	ldr	r3, [pc, #536]	; (800079c <main+0x294>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6093      	str	r3, [r2, #8]
	while(!((RCC->CR & RCC_CFGR_SWS_HSI)!= RCC_CFGR_SWS_HSI));
 800058a:	bf00      	nop
 800058c:	4b83      	ldr	r3, [pc, #524]	; (800079c <main+0x294>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	2b04      	cmp	r3, #4
 8000596:	d0f9      	beq.n	800058c <main+0x84>

	RCC->CFGR |= (RCC_CFGR_MCOSEL_LSI);		//set mco output to sysclk
 8000598:	4a80      	ldr	r2, [pc, #512]	; (800079c <main+0x294>)
 800059a:	4b80      	ldr	r3, [pc, #512]	; (800079c <main+0x294>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80005a2:	6093      	str	r3, [r2, #8]

	RCC->AHBENR |= (RCC_AHBENR_GPIOAEN);		//enable clock for PORTA peripheral
 80005a4:	4a7d      	ldr	r2, [pc, #500]	; (800079c <main+0x294>)
 80005a6:	4b7d      	ldr	r3, [pc, #500]	; (800079c <main+0x294>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= (RCC_AHBENR_GPIOBEN);		//enable clock for PORTB peripheral
 80005b0:	4a7a      	ldr	r2, [pc, #488]	; (800079c <main+0x294>)
 80005b2:	4b7a      	ldr	r3, [pc, #488]	; (800079c <main+0x294>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f043 0302 	orr.w	r3, r3, #2
 80005ba:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= (RCC_AHBENR_GPIOCEN);		//enable clock for PORTC peripheral
 80005bc:	4a77      	ldr	r2, [pc, #476]	; (800079c <main+0x294>)
 80005be:	4b77      	ldr	r3, [pc, #476]	; (800079c <main+0x294>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	61d3      	str	r3, [r2, #28]

	RCC->APB2ENR |= (RCC_APB2ENR_ADC1EN);		//enable clock for ADC1 peripheral
 80005c8:	4a74      	ldr	r2, [pc, #464]	; (800079c <main+0x294>)
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <main+0x294>)
 80005cc:	6a1b      	ldr	r3, [r3, #32]
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR |= (RCC_APB1ENR_TIM2EN);		//enable clock for TIM2 peripheral
 80005d4:	4a71      	ldr	r2, [pc, #452]	; (800079c <main+0x294>)
 80005d6:	4b71      	ldr	r3, [pc, #452]	; (800079c <main+0x294>)
 80005d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB1ENR |= (RCC_APB1ENR_TIM3EN);		//enable clock for TIM2 peripheral
 80005e0:	4a6e      	ldr	r2, [pc, #440]	; (800079c <main+0x294>)
 80005e2:	4b6e      	ldr	r3, [pc, #440]	; (800079c <main+0x294>)
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	f043 0302 	orr.w	r3, r3, #2
 80005ea:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->CSR |= (RCC_CSR_LSION);				//enable low-speed internal oscillator
 80005ec:	4a6b      	ldr	r2, [pc, #428]	; (800079c <main+0x294>)
 80005ee:	4b6b      	ldr	r3, [pc, #428]	; (800079c <main+0x294>)
 80005f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	6353      	str	r3, [r2, #52]	; 0x34
	while(!(RCC->CSR & RCC_CSR_LSIRDY));
 80005f8:	bf00      	nop
 80005fa:	4b68      	ldr	r3, [pc, #416]	; (800079c <main+0x294>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <main+0xf2>
	RCC->CSR |= (RCC_CSR_RTCSEL_LSI);			//set lcd and rtc clock to lsi
 8000606:	4a65      	ldr	r2, [pc, #404]	; (800079c <main+0x294>)
 8000608:	4b64      	ldr	r3, [pc, #400]	; (800079c <main+0x294>)
 800060a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6353      	str	r3, [r2, #52]	; 0x34

	RCC->APB1ENR |= (RCC_APB1ENR_LCDEN);		//enable clock for LCD peripheral
 8000612:	4a62      	ldr	r2, [pc, #392]	; (800079c <main+0x294>)
 8000614:	4b61      	ldr	r3, [pc, #388]	; (800079c <main+0x294>)
 8000616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800061c:	6253      	str	r3, [r2, #36]	; 0x24

	//------------------------------------CLOCK CONFIGURATION

	//------------------------------------INTERRUPTS

	SYSCFG->EXTICR[0] &= ~(SYSCFG_EXTICR1_EXTI0); 	//set exti0 line to PA0 (userbutton)
 800061e:	4a61      	ldr	r2, [pc, #388]	; (80007a4 <main+0x29c>)
 8000620:	4b60      	ldr	r3, [pc, #384]	; (80007a4 <main+0x29c>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f023 030f 	bic.w	r3, r3, #15
 8000628:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= (EXTI_IMR_MR0);					//mask interrupt exti0 line
 800062a:	4a5f      	ldr	r2, [pc, #380]	; (80007a8 <main+0x2a0>)
 800062c:	4b5e      	ldr	r3, [pc, #376]	; (80007a8 <main+0x2a0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= (EXTI_EMR_MR0);					//mask event exti0 line
 8000636:	4a5c      	ldr	r2, [pc, #368]	; (80007a8 <main+0x2a0>)
 8000638:	4b5b      	ldr	r3, [pc, #364]	; (80007a8 <main+0x2a0>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6053      	str	r3, [r2, #4]
	EXTI->RTSR |= (EXTI_RTSR_RT0);					//rising edge of exti0 generates interrupt
 8000642:	4a59      	ldr	r2, [pc, #356]	; (80007a8 <main+0x2a0>)
 8000644:	4b58      	ldr	r3, [pc, #352]	; (80007a8 <main+0x2a0>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI0_IRQn);
 800064e:	2006      	movs	r0, #6
 8000650:	f7ff ff32 	bl	80004b8 <NVIC_EnableIRQ>

	//------------------------------------INTERRUPTS

	//------------------------------------IO CONFIGURATION

	GPIOB->MODER |= (GPIO_MODER_MODER7_0); 		//set PB7 mode to general purpose out
 8000654:	4a55      	ldr	r2, [pc, #340]	; (80007ac <main+0x2a4>)
 8000656:	4b55      	ldr	r3, [pc, #340]	; (80007ac <main+0x2a4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_7);		//set PB7 type to push-pull
 8000660:	4a52      	ldr	r2, [pc, #328]	; (80007ac <main+0x2a4>)
 8000662:	4b52      	ldr	r3, [pc, #328]	; (80007ac <main+0x2a4>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800066a:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR7_1);	//set PB7 speed to high
 800066c:	4a4f      	ldr	r2, [pc, #316]	; (80007ac <main+0x2a4>)
 800066e:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <main+0x2a4>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000676:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7_0);		//set PB7 pu/pd to no pull
 8000678:	4a4c      	ldr	r2, [pc, #304]	; (80007ac <main+0x2a4>)
 800067a:	4b4c      	ldr	r3, [pc, #304]	; (80007ac <main+0x2a4>)
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000682:	60d3      	str	r3, [r2, #12]
//	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_8);		//set PA8 type to push-pull
//	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR8_1);	//set PA8 speed to high
//	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR8_0);		//set PA8 pu/pd to no pull
//	GPIOA->AFR[1] &= ~0xf;						//set PA8 alternate function as mco

	LcdIoInit();
 8000684:	f7ff fe9a 	bl	80003bc <LcdIoInit>

	//------------------------------------IO CONFIGURATION

	//------------------------------------LCD CONFIGURATION

	LCD->FCR = (LCD->FCR & ~(LCD_FCR_PON))		//clear the pulse duration bits
 8000688:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <main+0x2a8>)
 800068a:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <main+0x2a8>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	| (4<<4);									//set lcd puse duration to 4
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	LCD->FCR = (LCD->FCR & ~(LCD_FCR_PON))		//clear the pulse duration bits
 8000696:	6053      	str	r3, [r2, #4]

	LCD->FCR = (LCD->FCR & ~(LCD_FCR_CC))		//clear contrast bits
 8000698:	4a45      	ldr	r2, [pc, #276]	; (80007b0 <main+0x2a8>)
 800069a:	4b45      	ldr	r3, [pc, #276]	; (80007b0 <main+0x2a8>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
	| (5<<10);									//set lcd contrast to 5
 80006a2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
	LCD->FCR = (LCD->FCR & ~(LCD_FCR_CC))		//clear contrast bits
 80006a6:	6053      	str	r3, [r2, #4]

	LCD->FCR = (LCD->FCR & ~(LCD_FCR_PS))		//clear the lcd clock prescaler
 80006a8:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <main+0x2a8>)
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <main+0x2a8>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	f023 7370 	bic.w	r3, r3, #62914560	; 0x3c00000
	| (2<<22);									//set lcd clock prescaler to /2
 80006b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
	LCD->FCR = (LCD->FCR & ~(LCD_FCR_PS))		//clear the lcd clock prescaler
 80006b6:	6053      	str	r3, [r2, #4]
	LCD->FCR |= (4<<18);						//set the lcd div to /20
 80006b8:	4a3d      	ldr	r2, [pc, #244]	; (80007b0 <main+0x2a8>)
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <main+0x2a8>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c2:	6053      	str	r3, [r2, #4]

	LCD->CR |= (LCD_CR_BIAS_1);					//set lcd bias to 1/3
 80006c4:	4a3a      	ldr	r2, [pc, #232]	; (80007b0 <main+0x2a8>)
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <main+0x2a8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ce:	6013      	str	r3, [r2, #0]
	LCD->CR |= (LCD_CR_DUTY_0)|(LCD_CR_DUTY_1);	//set lcd duty to 1/4
 80006d0:	4a37      	ldr	r2, [pc, #220]	; (80007b0 <main+0x2a8>)
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <main+0x2a8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f043 030c 	orr.w	r3, r3, #12
 80006da:	6013      	str	r3, [r2, #0]
	//LCD->CR |= (LCD_CR_VSEL);					//set lcd vsel to external pin
	LCD->FCR |= (LCD_FCR_HD);					//enable vlcd hard-drive
 80006dc:	4a34      	ldr	r2, [pc, #208]	; (80007b0 <main+0x2a8>)
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <main+0x2a8>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6053      	str	r3, [r2, #4]
	LCD->FCR |= (LCD_FCR_CC_0)|(LCD_FCR_CC_1);  //set lcd voltage to ~3v
 80006e8:	4a31      	ldr	r2, [pc, #196]	; (80007b0 <main+0x2a8>)
 80006ea:	4b31      	ldr	r3, [pc, #196]	; (80007b0 <main+0x2a8>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80006f2:	6053      	str	r3, [r2, #4]
	LCD->CR |= (LCD_CR_MUX_SEG);				//set lcd multiplex to upper
 80006f4:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <main+0x2a8>)
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <main+0x2a8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fe:	6013      	str	r3, [r2, #0]

	LCD->CR |= (LCD_CR_LCDEN);					//enable lcd pheripherial
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <main+0x2a8>)
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <main+0x2a8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6013      	str	r3, [r2, #0]

	while(!(LCD->SR & LCD_SR_RDY));
 800070c:	bf00      	nop
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <main+0x2a8>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f9      	beq.n	800070e <main+0x206>
	LoopDelay(100);
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	f7ff fee4 	bl	80004e8 <LoopDelay>
	LcdPrintString(0,"-FiFi-");
 8000720:	4924      	ldr	r1, [pc, #144]	; (80007b4 <main+0x2ac>)
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff fdb2 	bl	800028c <LcdPrintString>
	LcdUpdate();								//wait until lcd starts
 8000728:	f7ff fe34 	bl	8000394 <LcdUpdate>

	//------------------------------------ADC CONFIGURATION

	//------------------------------------TIM2 CONFIGURATION

	TIM3->PSC = 4000;							//set timer2 prescaler to 100000
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <main+0x2b0>)
 800072e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 500;								//set timer2 auto-reload value to 10
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <main+0x2b0>)
 8000736:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CR1 |= (TIM_CR1_DIR);					//set timer2 as down-counter
 800073c:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <main+0x2b0>)
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <main+0x2b0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]

	TIM3->DIER |= (TIM_DIER_UIE);				//enable timer2 interrupt on overflow
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <main+0x2b0>)
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <main+0x2b0>)
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= (TIM_CR1_CEN);					//enable timer2
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <main+0x2b0>)
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <main+0x2b0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM3_IRQn);
 8000760:	201d      	movs	r0, #29
 8000762:	f7ff fea9 	bl	80004b8 <NVIC_EnableIRQ>

	//------------------------------------TIM2 CONFIGURATION

	//------------------------------------TIM3 CONFIGURATION

	TIM2->PSC = 4000;							//set timer2 prescaler to 100000
 8000766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 200;								//set timer2 auto-reload value to 10
 8000770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000774:	22c8      	movs	r2, #200	; 0xc8
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (TIM_CR1_DIR);				//set timer2 as up-counter
 8000778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]

	TIM2->DIER |= (TIM_DIER_UIE);				//enable timer2 interrupt on capture
 8000788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	60d3      	str	r3, [r2, #12]
 8000798:	e010      	b.n	80007bc <main+0x2b4>
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000
 80007a4:	40010000 	.word	0x40010000
 80007a8:	40010400 	.word	0x40010400
 80007ac:	40020400 	.word	0x40020400
 80007b0:	40002400 	.word	0x40002400
 80007b4:	08000a10 	.word	0x08000a10
 80007b8:	40000400 	.word	0x40000400
	TIM2->CR1 |= (TIM_CR1_URS);					//only under/over flow generates update
 80007bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= (TIM_CR1_CEN);					//enable timer2
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);
 80007dc:	201c      	movs	r0, #28
 80007de:	f7ff fe6b 	bl	80004b8 <NVIC_EnableIRQ>

	//------------------------------------TIM3 CONFIGURATION

	while (1){
 80007e2:	e7fe      	b.n	80007e2 <main+0x2da>

080007e4 <TIM3_IRQHandler>:

uint8_t i = 1;
uint8_t up = 1;
uint8_t cnt;

void TIM3_IRQHandler(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <TIM3_IRQHandler+0x90>)
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d03d      	beq.n	8000870 <TIM3_IRQHandler+0x8c>
		TIM3->SR &= ~TIM_SR_UIF;
 80007f4:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <TIM3_IRQHandler+0x90>)
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <TIM3_IRQHandler+0x90>)
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	6113      	str	r3, [r2, #16]

		LcdPrintBar(i);
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <TIM3_IRQHandler+0x94>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd6b 	bl	80002e0 <LcdPrintBar>
		if(i>8) i = 0;
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <TIM3_IRQHandler+0x94>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b08      	cmp	r3, #8
 8000810:	d902      	bls.n	8000818 <TIM3_IRQHandler+0x34>
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <TIM3_IRQHandler+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
		if(up) i = i <<1; else i = i >>1;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <TIM3_IRQHandler+0x98>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <TIM3_IRQHandler+0x4a>
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <TIM3_IRQHandler+0x94>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <TIM3_IRQHandler+0x94>)
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e005      	b.n	800083a <TIM3_IRQHandler+0x56>
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <TIM3_IRQHandler+0x94>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	085b      	lsrs	r3, r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <TIM3_IRQHandler+0x94>)
 8000838:	701a      	strb	r2, [r3, #0]
		if(i==8) up = 0;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <TIM3_IRQHandler+0x94>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d102      	bne.n	8000848 <TIM3_IRQHandler+0x64>
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <TIM3_IRQHandler+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
		if(i==1) up = 1;
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <TIM3_IRQHandler+0x94>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d102      	bne.n	8000856 <TIM3_IRQHandler+0x72>
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <TIM3_IRQHandler+0x98>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
		LcdUpdate();
 8000856:	f7ff fd9d 	bl	8000394 <LcdUpdate>
		if(cnt == 0){
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <TIM3_IRQHandler+0x9c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d103      	bne.n	800086a <TIM3_IRQHandler+0x86>
			//GPIOB->BSRR |= (GPIO_BSRR_BS_7);
			cnt = 1;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <TIM3_IRQHandler+0x9c>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
		}else{
			//GPIOB->BSRR |= (GPIO_BSRR_BR_7);
			cnt = 0;
		}
	}
}
 8000868:	e002      	b.n	8000870 <TIM3_IRQHandler+0x8c>
			cnt = 0;
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <TIM3_IRQHandler+0x9c>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40000400 	.word	0x40000400
 8000878:	20000000 	.word	0x20000000
 800087c:	20000001 	.word	0x20000001
 8000880:	20000021 	.word	0x20000021

08000884 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	EXTI->PR |= (EXTI_PR_PR0);						//reset interrupt flag
 8000888:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <EXTI0_IRQHandler+0x1c>)
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <EXTI0_IRQHandler+0x1c>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6153      	str	r3, [r2, #20]
	LcdPrintString(0,"-exti-");
 8000894:	4903      	ldr	r1, [pc, #12]	; (80008a4 <EXTI0_IRQHandler+0x20>)
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fcf8 	bl	800028c <LcdPrintString>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40010400 	.word	0x40010400
 80008a4:	08000a18 	.word	0x08000a18

080008a8 <TIM2_IRQHandler>:

uint8_t c =0;

void TIM2_IRQHandler(void){
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;				//reset interrupt flag
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6113      	str	r3, [r2, #16]
	if(c == 0){
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <TIM2_IRQHandler+0x4c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d109      	bne.n	80008d8 <TIM2_IRQHandler+0x30>
		GPIOB->BSRR |= (GPIO_BSRR_BS_7);
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <TIM2_IRQHandler+0x50>)
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <TIM2_IRQHandler+0x50>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ce:	6193      	str	r3, [r2, #24]
		c = 1;
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <TIM2_IRQHandler+0x4c>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
	}else{
		GPIOB->BSRR |= (GPIO_BSRR_BR_7);
		c = 0;
	}
}
 80008d6:	e008      	b.n	80008ea <TIM2_IRQHandler+0x42>
		GPIOB->BSRR |= (GPIO_BSRR_BR_7);
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <TIM2_IRQHandler+0x50>)
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <TIM2_IRQHandler+0x50>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008e2:	6193      	str	r3, [r2, #24]
		c = 0;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <TIM2_IRQHandler+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000020 	.word	0x20000020
 80008f8:	40020400 	.word	0x40020400

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800090e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000918:	f842 3b04 	str.w	r3, [r2], #4

0800091c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f000 f811 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f000 f843 	bl	80009b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fded 	bl	8000508 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r3, =_sidata
 8000930:	08000b30 	.word	0x08000b30
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000938:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 800093c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000940:	20000024 	.word	0x20000024

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>
	...

08000948 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800094c:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <SystemInit+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <SystemInit+0x5c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000958:	4912      	ldr	r1, [pc, #72]	; (80009a4 <SystemInit+0x5c>)
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <SystemInit+0x5c>)
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <SystemInit+0x60>)
 8000960:	4013      	ands	r3, r2
 8000962:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <SystemInit+0x5c>)
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <SystemInit+0x5c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800096e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000972:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000974:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <SystemInit+0x5c>)
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <SystemInit+0x5c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <SystemInit+0x5c>)
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SystemInit+0x5c>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800098a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SystemInit+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SystemInit+0x64>)
 8000994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000998:	609a      	str	r2, [r3, #8]
#endif
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	88ffc00c 	.word	0x88ffc00c
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__libc_init_array>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	2500      	movs	r5, #0
 80009b4:	4e0c      	ldr	r6, [pc, #48]	; (80009e8 <__libc_init_array+0x38>)
 80009b6:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__libc_init_array+0x3c>)
 80009b8:	1ba4      	subs	r4, r4, r6
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	42a5      	cmp	r5, r4
 80009be:	d109      	bne.n	80009d4 <__libc_init_array+0x24>
 80009c0:	f000 f81a 	bl	80009f8 <_init>
 80009c4:	2500      	movs	r5, #0
 80009c6:	4e0a      	ldr	r6, [pc, #40]	; (80009f0 <__libc_init_array+0x40>)
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <__libc_init_array+0x44>)
 80009ca:	1ba4      	subs	r4, r4, r6
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	42a5      	cmp	r5, r4
 80009d0:	d105      	bne.n	80009de <__libc_init_array+0x2e>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d8:	4798      	blx	r3
 80009da:	3501      	adds	r5, #1
 80009dc:	e7ee      	b.n	80009bc <__libc_init_array+0xc>
 80009de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009e2:	4798      	blx	r3
 80009e4:	3501      	adds	r5, #1
 80009e6:	e7f2      	b.n	80009ce <__libc_init_array+0x1e>
 80009e8:	08000b28 	.word	0x08000b28
 80009ec:	08000b28 	.word	0x08000b28
 80009f0:	08000b28 	.word	0x08000b28
 80009f4:	08000b2c 	.word	0x08000b2c

080009f8 <_init>:
 80009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fa:	bf00      	nop
 80009fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fe:	bc08      	pop	{r3}
 8000a00:	469e      	mov	lr, r3
 8000a02:	4770      	bx	lr

08000a04 <_fini>:
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	bf00      	nop
 8000a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a0a:	bc08      	pop	{r3}
 8000a0c:	469e      	mov	lr, r3
 8000a0e:	4770      	bx	lr
